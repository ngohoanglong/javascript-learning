[
  [
    {
      "tagName": "H6",
      "innerText": "1. What's the output?",
      "innerHTML": "<a id=\"user-content-1-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#1-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>1. What's the output?",
      "id": "user-content-1-whats-the-output",
      "index": "1",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "function a(x) {\n  x++;\n  return function () {\n    console.log(++x);\n  };\n}\n\na(1)();\na(1)();\na(1)();\n\nlet x = a(1);\nx();\nx();\nx();",
      "innerHTML": "<pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">a</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-s1\">x</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">++</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-en\">a</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">a</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">a</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">a</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">x</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">x</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">x</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 1, 2, 3 and 1, 2, 3\nB: 3, 3, 3 and 3, 4, 5\nC: 3, 3, 3 and 1, 2, 3\nD: 1, 2, 3 and 3, 3, 3",
      "innerHTML": "\n<li>A: <code>1, 2, 3</code> and <code>1, 2, 3</code></li>\n<li>B: <code>3, 3, 3</code> and <code>3, 4, 5</code></li>\n<li>C: <code>3, 3, 3</code> and <code>1, 2, 3</code></li>\n<li>D: <code>1, 2, 3</code> and <code>3, 3, 3</code></li>\n",
      "options": [
        [
          "A",
          "<code>1, 2, 3</code> and <code>1, 2, 3</code>"
        ],
        [
          "B",
          "<code>3, 3, 3</code> and <code>3, 4, 5</code>"
        ],
        [
          "C",
          "<code>3, 3, 3</code> and <code>1, 2, 3</code>"
        ],
        [
          "D",
          "<code>1, 2, 3</code> and <code>3, 3, 3</code>"
        ]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: B</h4>\n<p>This question reminds us about Closure in JS. Closure allows us to create a <code>stateful function</code> and such function can access to variable outside of its scope. In a nutshell, a closure can have access to <code>global</code> variable (scope), <code>father function</code> scope and <code>its</code> own scope.</p>\n<p>We have here 3, 3, 3 and 3, 4, 5 because first we simply call the function <code>a()</code>. It works like a normal function and we do not see something <code>stateful</code> here. In later case, we declare a variable <code>x</code> and it stores the value of function <code>a(1)</code>, that is why we get 3. 4. 5 rather than 3, 3, 3.</p>\n<p>This kind of gotcha gives me the feeling of <code>static</code> variable in PHP world.</p>\n<p></p>\n",
      "answer": "B",
      "description": [
        "This question reminds us about Closure in JS. Closure allows us to create a <code>stateful function</code> and such function can access to variable outside of its scope. In a nutshell, a closure can have access to <code>global</code> variable (scope), <code>father function</code> scope and <code>its</code> own scope.",
        "We have here 3, 3, 3 and 3, 4, 5 because first we simply call the function <code>a()</code>. It works like a normal function and we do not see something <code>stateful</code> here. In later case, we declare a variable <code>x</code> and it stores the value of function <code>a(1)</code>, that is why we get 3. 4. 5 rather than 3, 3, 3.",
        "This kind of gotcha gives me the feeling of <code>static</code> variable in PHP world."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "2. What's the output?",
      "innerHTML": "<a id=\"user-content-2-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#2-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>2. What's the output?",
      "id": "user-content-2-whats-the-output",
      "index": "2",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "function Name(a, b) {\n  this.a = a;\n  this.b = b;\n}\n\nconst me = Name(\"Vuong\", \"Nguyen\");\n\nconsole.log(!(a.length - window.a.length));",
      "innerHTML": "<pre><span class=\"pl-k\">function</span> <span class=\"pl-v\">Name</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">b</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">b</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">b</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">me</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Name</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Vuong\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"Nguyen\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span>!<span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">-</span> <span class=\"pl-smi\">window</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: undefined\nB: NaN\nC: true\nD: false",
      "innerHTML": "\n<li>A: <code>undefined</code></li>\n<li>B: <code>NaN</code></li>\n<li>C: <code>true</code></li>\n<li>D: <code>false</code></li>\n",
      "options": [
        ["A", "<code>undefined</code>"],
        ["B", "<code>NaN</code>"],
        ["C", "<code>true</code>"],
        ["D", "<code>false</code>"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: C</h4>\n<p>We get true in the console. The tricky part is when we create an object from the constructor function Name but we DO NOT USE <code>new</code> keywork. That makes the variable <code>a</code> global one and get the value \"Vuong\". Remember that it is actually a property of the global object <code>window</code> (in the browser) or <code>global</code> in the nodejs.</p>\n<p>We then get <code>a.length</code> ~ 5 and <code>window.a.length</code> ~ 5 which return 0. !0 returns true.</p>\n<p>Imagine what would happen when we create the instance <code>me</code> with the <code>new</code> keywork. That is an interesting inquire!</p>\n<p></p>\n",
      "answer": "C",
      "description": [
        "We get true in the console. The tricky part is when we create an object from the constructor function Name but we DO NOT USE <code>new</code> keywork. That makes the variable <code>a</code> global one and get the value \"Vuong\". Remember that it is actually a property of the global object <code>window</code> (in the browser) or <code>global</code> in the nodejs.",
        "We then get <code>a.length</code> ~ 5 and <code>window.a.length</code> ~ 5 which return 0. !0 returns true.",
        "Imagine what would happen when we create the instance <code>me</code> with the <code>new</code> keywork. That is an interesting inquire!"
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "3. What's the output?",
      "innerHTML": "<a id=\"user-content-3-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#3-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>3. What's the output?",
      "id": "user-content-3-whats-the-output",
      "index": "3",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const x = function (...x) {\n  let k = (typeof x).length;\n  let y = () => \"freetut\".length;\n  let z = { y: y };\n\n  return k - z.y();\n};\n\nconsole.log(Boolean(x()));",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-en\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span>...<span class=\"pl-en\">x</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">k</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-en\">x</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-en\">y</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s\">\"freetut\"</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">z</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">y</span>: <span class=\"pl-en\">y</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">k</span> <span class=\"pl-c1\">-</span> <span class=\"pl-s1\">z</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">y</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Boolean</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">x</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: true\nB: 1\nC: -1\nD: false",
      "innerHTML": "\n<li>A: <code>true</code></li>\n<li>B: 1</li>\n<li>C: -1</li>\n<li>D: <code>false</code></li>\n",
      "options": [
        ["A", "<code>true</code>"],
        ["B", "1"],
        ["C", "-1"],
        ["D", "<code>false</code>"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: A</h4>\n<p>The spread operator <code>...x</code> might help us obtain the parameter in the function in the form of array. Yet, in Javascript the typeof array return \"object\" rather than \"array\". It is totally odd if you are coming from PHP.</p>\n<p>That is said, we now have the length of the string <code>object</code> which returns 6. z.y() simply returns the length of the string 'freetut' (7).</p>\n<p>Be aware that the function x() (in the form of <code>function express</code> or <code>anonymous function</code> (if you are coming from PHP) return -1 when being called and when converted to bool with <code>Boolean(-1)</code> return true instead of false. Noted that <code>Boolean(0)</code> return false.</p>\n<p></p>\n",
      "answer": "A",
      "description": [
        "The spread operator <code>...x</code> might help us obtain the parameter in the function in the form of array. Yet, in Javascript the typeof array return \"object\" rather than \"array\". It is totally odd if you are coming from PHP.",
        "That is said, we now have the length of the string <code>object</code> which returns 6. z.y() simply returns the length of the string 'freetut' (7).",
        "Be aware that the function x() (in the form of <code>function express</code> or <code>anonymous function</code> (if you are coming from PHP) return -1 when being called and when converted to bool with <code>Boolean(-1)</code> return true instead of false. Noted that <code>Boolean(0)</code> return false."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "4. What's the output?",
      "innerHTML": "<a id=\"user-content-4-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#4-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>4. What's the output?",
      "id": "user-content-4-whats-the-output",
      "index": "4",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "(function js(x) {\n  const y = (j) => j * x;\n\n  console.log(y(s()));\n\n  function s() {\n    return j();\n  }\n\n  function j() {\n    return x ** x;\n  }\n})(3);",
      "innerHTML": "<pre><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-en\">js</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">y</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">j</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">j</span> * <span class=\"pl-s1\">x</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">y</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">s</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">s</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">j</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">j</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">x</span> ** <span class=\"pl-s1\">x</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: undefined\nB: 18\nC: 81\nD: 12",
      "innerHTML": "\n<li>A: <code>undefined</code></li>\n<li>B: 18</li>\n<li>C: 81</li>\n<li>D: 12</li>\n",
      "options": [
        ["A", "<code>undefined</code>"],
        ["B", "18"],
        ["C", "81"],
        ["D", "12"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: C</h4>\n<p>The function <code>js()</code> can be automatically executed without calling it and known as IIFE (Immediately Invoked Function Expression). Noted the parameter <code>x</code> of the function <code>js</code> is actuallly passed with the value 3.</p>\n<p>The value return of the function is y(s())), meaning calling three other functions <code>y()</code>, <code>s()</code> and <code>j()</code> because the function <code>s()</code> returns <code>j()</code>.</p>\n<p>j() returns 3^3 = 27 so that s() returns 27.</p>\n<p>y(s()) means y(27) which returns 27*3 = 81.</p>\n<p>Note that we can call <code>declare function</code> BEFORE the function is actually declared but not with <code>expression function</code>.</p>\n<p></p>\n",
      "answer": "C",
      "description": [
        "The function <code>js()</code> can be automatically executed without calling it and known as IIFE (Immediately Invoked Function Expression). Noted the parameter <code>x</code> of the function <code>js</code> is actuallly passed with the value 3.",
        "The value return of the function is y(s())), meaning calling three other functions <code>y()</code>, <code>s()</code> and <code>j()</code> because the function <code>s()</code> returns <code>j()</code>.",
        "j() returns 3^3 = 27 so that s() returns 27.",
        "y(s()) means y(27) which returns 27*3 = 81.",
        "Note that we can call <code>declare function</code> BEFORE the function is actually declared but not with <code>expression function</code>."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "5. What's the output?",
      "innerHTML": "<a id=\"user-content-5-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#5-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>5. What's the output?",
      "id": "user-content-5-whats-the-output",
      "index": "5",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "var tip = 100;\n\n(function () {\n  console.log(\"I have $\" + husband());\n\n  function wife() {\n    return tip * 2;\n  }\n\n  function husband() {\n    return wife() / 2;\n  }\n\n  var tip = 10;\n})();",
      "innerHTML": "<pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">tip</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">100</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"I have $\"</span> <span class=\"pl-c1\">+</span> <span class=\"pl-en\">husband</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">wife</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">tip</span> * <span class=\"pl-c1\">2</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">function</span> <span class=\"pl-en\">husband</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">wife</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> / <span class=\"pl-c1\">2</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">var</span> <span class=\"pl-s1\">tip</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">10</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: \"I have $10\";\nB: \"I have $100\";\nC: \"I have $50\";\nD: \"I have $NaN\";",
      "innerHTML": "\n<li>A: \"I have $10\";</li>\n<li>B: \"I have $100\";</li>\n<li>C: \"I have $50\";</li>\n<li>D: \"I have $NaN\";</li>\n",
      "options": [
        ["A", "\"I have $10\";"],
        ["B", "\"I have $100\";"],
        ["C", "\"I have $50\";"],
        ["D", "\"I have $NaN\";"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>We have here an IIFE (Immediately Invoked Function Expression). It means we do not have to call it but it will be excuted automatically when declared. The flow is as: husband() returns wife()/2 and wife() returns tip*2.</p>\n<p>We might think that tip = 100 because it is a global variable when declaring with <code>var</code> keyword. However, it is actually <code>undefined</code> because we also have <code>var tip = 10</code> INSIDE the function. As the variable <code>tip</code> is hoisted with default value <code>undefined</code>, the final result would be D. We know that <code>undefined</code> returns NaN when we try to divide to 2 or multiple with 2.</p>\n<p>If we do not re-declare <code>var tip = 10;</code> at the end of the function, we will definately get D.</p>\n<p>JS is fun, right?</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "We have here an IIFE (Immediately Invoked Function Expression). It means we do not have to call it but it will be excuted automatically when declared. The flow is as: husband() returns wife()/2 and wife() returns tip*2.",
        "We might think that tip = 100 because it is a global variable when declaring with <code>var</code> keyword. However, it is actually <code>undefined</code> because we also have <code>var tip = 10</code> INSIDE the function. As the variable <code>tip</code> is hoisted with default value <code>undefined</code>, the final result would be D. We know that <code>undefined</code> returns NaN when we try to divide to 2 or multiple with 2.",
        "If we do not re-declare <code>var tip = 10;</code> at the end of the function, we will definately get D.",
        "JS is fun, right?"
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "6. What's the output?",
      "innerHTML": "<a id=\"user-content-6-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#6-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>6. What's the output?",
      "id": "user-content-6-whats-the-output",
      "index": "6",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const js = { language: \"loosely type\", label: \"difficult\" };\n\nconst edu = { ...js, level: \"PhD\" };\n\nconst newbie = edu;\n\ndelete edu.language;\n\nconsole.log(Object.keys(newbie).length);",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">js</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">language</span>: <span class=\"pl-s\">\"loosely type\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">label</span>: <span class=\"pl-s\">\"difficult\"</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">edu</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span> ...<span class=\"pl-s1\">js</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">level</span>: <span class=\"pl-s\">\"PhD\"</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">newbie</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">edu</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">delete</span> <span class=\"pl-s1\">edu</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">language</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">keys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newbie</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 2;\nB: 3;\nC: 4;\nD: 5;",
      "innerHTML": "\n<li>A: 2;</li>\n<li>B: 3;</li>\n<li>C: 4;</li>\n<li>D: 5;</li>\n",
      "options": [
        ["A", "2;"],
        ["B", "3;"],
        ["C", "4;"],
        ["D", "5;"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: A</h4>\n<p>This challenge revises the ES6's feature regarding <code>spread operator ...</code> Spread operator is quite useful for retrieving parameter in function, to <code>unite</code> or <code>combine</code> object and array in JavaScript. PHP also has this feature.</p>\n<p>In the variable <code>edu</code>, we use <code>...js</code> (spread operator here) to combine both objects into one. It works in the same way with array.</p>\n<p>Then we declare another variable named <code>newbie</code>. IMPORTANT note: By declaring the variable like that, both variables point to the SAME POSITION in the memory. We may have known something like <code>$a = &amp;$b</code> in PHP, which let both varibles work in the same way. We might have known about <code>pass by reference</code> in the case.</p>\n<p>Then we have 2 as <code>edu.language</code> is deleted. Both objects now have only two elements.</p>\n<p>Now is time to think about coping an object in JS either shallow or deep one.</p>\n<p></p>\n",
      "answer": "A",
      "description": [
        "This challenge revises the ES6's feature regarding <code>spread operator ...</code> Spread operator is quite useful for retrieving parameter in function, to <code>unite</code> or <code>combine</code> object and array in JavaScript. PHP also has this feature.",
        "In the variable <code>edu</code>, we use <code>...js</code> (spread operator here) to combine both objects into one. It works in the same way with array.",
        "Then we declare another variable named <code>newbie</code>. IMPORTANT note: By declaring the variable like that, both variables point to the SAME POSITION in the memory. We may have known something like <code>$a = &amp;$b</code> in PHP, which let both varibles work in the same way. We might have known about <code>pass by reference</code> in the case.",
        "Then we have 2 as <code>edu.language</code> is deleted. Both objects now have only two elements.",
        "Now is time to think about coping an object in JS either shallow or deep one."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "7. What's the output?",
      "innerHTML": "<a id=\"user-content-7-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#7-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>7. What's the output?",
      "id": "user-content-7-whats-the-output",
      "index": "7",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "var candidate = {\n  name: \"Vuong\",\n  age: 30,\n};\n\nvar job = {\n  frontend: \"Vuejs or Reactjs\",\n  backend: \"PHP and Laravel\",\n  city: \"Auckland\",\n};\n\nclass Combine {\n  static get() {\n    return Object.assign(candidate, job);\n  }\n\n  static count() {\n    return Object.keys(this.get()).length;\n  }\n}\n\nconsole.log(Combine.count());",
      "innerHTML": "<pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">candidate</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"Vuong\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">age</span>: <span class=\"pl-c1\">30</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">job</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">frontend</span>: <span class=\"pl-s\">\"Vuejs or Reactjs\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">backend</span>: <span class=\"pl-s\">\"PHP and Laravel\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">city</span>: <span class=\"pl-s\">\"Auckland\"</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-v\">Combine</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">static</span> <span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">assign</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">candidate</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">job</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">static</span> <span class=\"pl-en\">count</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">keys</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Combine</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">count</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 5;\nB: 6;\nC: 7;\nD: 8;",
      "innerHTML": "\n<li>A: 5;</li>\n<li>B: 6;</li>\n<li>C: 7;</li>\n<li>D: 8;</li>\n",
      "options": [
        ["A", "5;"],
        ["B", "6;"],
        ["C", "7;"],
        ["D", "8;"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-2\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: A</h4>\n<p>The buit-in method <code>Object.assign(candidate, job)</code> merges the two objects <code>candidate</code> and <code>job</code> into one object. Then the method <code>Object.keys</code> counts the number of <code>key</code> in the object.</p>\n<p>Note that two methods <code>get()</code> and <code>count()</code> are defined as <code>static</code>, so they need to be called statically using <code>Class.staticmethod()</code> syntax. Then the final object get 5 elements.</p>\n<p></p>\n",
      "answer": "A",
      "description": [
        "The buit-in method <code>Object.assign(candidate, job)</code> merges the two objects <code>candidate</code> and <code>job</code> into one object. Then the method <code>Object.keys</code> counts the number of <code>key</code> in the object.",
        "Note that two methods <code>get()</code> and <code>count()</code> are defined as <code>static</code>, so they need to be called statically using <code>Class.staticmethod()</code> syntax. Then the final object get 5 elements."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "8. What's the output?",
      "innerHTML": "<a id=\"user-content-8-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#8-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>8. What's the output?",
      "id": "user-content-8-whats-the-output",
      "index": "8",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "var x = 1;\n\n(() => {\n  x += 1;\n  ++x;\n})();\n((y) => {\n  x += y;\n  x = x % y;\n})(2);\n(() => (x += x))();\n(() => (x *= x))();\n\nconsole.log(x);",
      "innerHTML": "<pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">+=</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-c1\">++</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">y</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">+=</span> <span class=\"pl-s1\">y</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">x</span> % <span class=\"pl-s1\">y</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span> <span class=\"pl-c1\">+=</span> <span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span> *= <span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 4;\nB: 50;\nC: 2;\nD: 10;",
      "innerHTML": "\n<li>A: 4;</li>\n<li>B: 50;</li>\n<li>C: 2;</li>\n<li>D: 10;</li>\n",
      "options": [
        ["A", "4;"],
        ["B", "50;"],
        ["C", "2;"],
        ["D", "10;"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-3\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-3\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: A</h4>\n<p>Initially <code>x</code> is declared with the value 1. In the first IIFE function, there are two operations. First <code>x</code> becomes 2 and then 3.</p>\n<p>In the second IIFE function, <code>x = x + y</code> then the current value is 5. In the second operation, it returns only 1 as it undergoes <code>5%2</code>.</p>\n<p>In the third and fouth IIFE functions, we get 2 <code>x = x + x</code> and then 4 <code>x = x * x</code>. It is more than simple.</p>\n<p></p>\n",
      "answer": "A",
      "description": [
        "Initially <code>x</code> is declared with the value 1. In the first IIFE function, there are two operations. First <code>x</code> becomes 2 and then 3.",
        "In the second IIFE function, <code>x = x + y</code> then the current value is 5. In the second operation, it returns only 1 as it undergoes <code>5%2</code>.",
        "In the third and fouth IIFE functions, we get 2 <code>x = x + x</code> and then 4 <code>x = x * x</code>. It is more than simple."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "9. What's the output?",
      "innerHTML": "<a id=\"user-content-9-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#9-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>9. What's the output?",
      "id": "user-content-9-whats-the-output",
      "index": "9",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "$var = 10;\n\n$f = function($let) use ($var) {\n    return ++$let + $var;\n};\n\n$var = 15;\necho $f(10);",
      "innerHTML": "<pre><span class=\"pl-s1\"><span class=\"pl-c1\">$</span>var</span> = <span class=\"pl-c1\">10</span>;\n\n<span class=\"pl-s1\"><span class=\"pl-c1\">$</span>f</span> = <span class=\"pl-k\">function</span>(<span class=\"pl-s1\"><span class=\"pl-c1\">$</span>let</span>) <span class=\"pl-k\">use</span> (<span class=\"pl-s1\"><span class=\"pl-c1\">$</span>var</span>) {\n    <span class=\"pl-k\">return</span> ++<span class=\"pl-s1\"><span class=\"pl-c1\">$</span>let</span> + <span class=\"pl-s1\"><span class=\"pl-c1\">$</span>var</span>;\n};\n\n<span class=\"pl-s1\"><span class=\"pl-c1\">$</span>var</span> = <span class=\"pl-c1\">15</span>;\n<span class=\"pl-k\">echo</span> <span class=\"pl-s1\"><span class=\"pl-c1\">$</span>f</span>(<span class=\"pl-c1\">10</span>);</pre>"
    },
    {
      "tagName": "DIV",
      "innerText": "var x = 10;\n\nconst f = (l) => ++l + x;\n\nx = 15;\nconsole.log(f(10));",
      "innerHTML": "<pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">10</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">f</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">l</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-c1\">++</span><span class=\"pl-s1\">l</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">x</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">15</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">f</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">10</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 26 and 26;\nB: 21 and 21;\nC: 21 and 26;\nD: 26 and 21;",
      "innerHTML": "\n<li>A: 26 and 26;</li>\n<li>B: 21 and 21;</li>\n<li>C: 21 and 26;</li>\n<li>D: 26 and 21;</li>\n",
      "options": [
        ["A", "26 and 26;"],
        ["B", "21 and 21;"],
        ["C", "21 and 26;"],
        ["D", "26 and 21;"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-2\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: C</h4>\n<p>This question illustrates the diffences between PHP and JavaScript when handling closure. In the first snippet, we declare a closure with the keyword <code>use</code>. Closure in PHP is simply an anonymous function and the data is passed to the function using the keyword <code>use</code>. Otherwise, it is called as <code>lambda</code> when we do not use the keyword <code>use</code>. You can check the result of the snippet here <a href=\"https://3v4l.org/PSeMY\" rel=\"nofollow\">https://3v4l.org/PSeMY</a>. PHP <code>closure</code> only accepts the value of the variable BEFORE the closure is defined, no matter where it is called. As such, <code>$var</code> is 10 rather than 15.</p>\n<p>On the contrary, JavaScript treats the variable a bit different when it is passed to anonymous function. We do not have to use the keyword <code>use</code> here to pass variable to the closure. The variable <code>x</code> in the second snippet is updated before the closure is called, then we get 26.</p>\n<p>Note that in PHP 7.4, we have arrow function and we then do not have to use the keyword <code>use</code> to pass the variable to function. Another way to call a <code>global</code> ariable inside a function in PHP is to use the keyword <code>global</code> or employ the built-in GLOBAL variable $GLOBALS.</p>\n<p></p>\n",
      "answer": "C",
      "description": [
        "This question illustrates the diffences between PHP and JavaScript when handling closure. In the first snippet, we declare a closure with the keyword <code>use</code>. Closure in PHP is simply an anonymous function and the data is passed to the function using the keyword <code>use</code>. Otherwise, it is called as <code>lambda</code> when we do not use the keyword <code>use</code>. You can check the result of the snippet here <a href=\"https://3v4l.org/PSeMY\" rel=\"nofollow\">https://3v4l.org/PSeMY</a>. PHP <code>closure</code> only accepts the value of the variable BEFORE the closure is defined, no matter where it is called. As such, <code>$var</code> is 10 rather than 15.",
        "On the contrary, JavaScript treats the variable a bit different when it is passed to anonymous function. We do not have to use the keyword <code>use</code> here to pass variable to the closure. The variable <code>x</code> in the second snippet is updated before the closure is called, then we get 26.",
        "Note that in PHP 7.4, we have arrow function and we then do not have to use the keyword <code>use</code> to pass the variable to function. Another way to call a <code>global</code> ariable inside a function in PHP is to use the keyword <code>global</code> or employ the built-in GLOBAL variable $GLOBALS."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "10. What's the output?",
      "innerHTML": "<a id=\"user-content-10-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#10-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>10. What's the output?",
      "id": "user-content-10-whats-the-output",
      "index": "10",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "let x = {};\nlet y = {};\nlet z = x;\n\nconsole.log(x == y);\nconsole.log(x === y);\nconsole.log(x == z);\nconsole.log(x === z);",
      "innerHTML": "<pre><span class=\"pl-k\">let</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">y</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">z</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">x</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span> <span class=\"pl-c1\">==</span> <span class=\"pl-s1\">y</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">y</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span> <span class=\"pl-c1\">==</span> <span class=\"pl-s1\">z</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">z</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: true true true true;\nB: false false false false;\nC: true true false false;\nD: false false true true;",
      "innerHTML": "\n<li>A: true true true true;</li>\n<li>B: false false false false;</li>\n<li>C: true true false false;</li>\n<li>D: false false true true;</li>\n",
      "options": [
        ["A", "true true true true;"],
        ["B", "false false false false;"],
        ["C", "true true false false;"],
        ["D", "false false true true;"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>Technically, <code>x</code> and <code>y</code> have the same value. Both are empty objects. However, we do not use the value to compare objects.</p>\n<p><code>z</code> is <code>x</code> are two objects referring to the same memory position. In JavaScript, array and object are passed by <code>reference</code>. <code>x</code> and <code>z</code> therefore return true when being compared.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "Technically, <code>x</code> and <code>y</code> have the same value. Both are empty objects. However, we do not use the value to compare objects.",
        "<code>z</code> is <code>x</code> are two objects referring to the same memory position. In JavaScript, array and object are passed by <code>reference</code>. <code>x</code> and <code>z</code> therefore return true when being compared."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "11. What's the output?",
      "innerHTML": "<a id=\"user-content-11-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#11-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>11. What's the output?",
      "id": "user-content-11-whats-the-output",
      "index": "11",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "console.log(\"hello\");\n\nsetTimeout(() => console.log(\"hey\"), 1);\nsetTimeout(() => console.log(\"kiora\"), 2);\nsetTimeout(() => console.log(\"world\"), 0);\n\nconsole.log(\"hi\");",
      "innerHTML": "<pre><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"hello\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"hey\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"kiora\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"world\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"hi\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: \"hello\" \"hey\" \"kiora\" \"world\" \"hi\"\nB: \"hello\" \"hi\" \"hey\" \"kiora\" \"world\"\nC: \"hello\" \"hi\" \"world\" \"hey\" \"kiora\"\nD: \"hello\" \"hi\" \"hey\" \"world\" \"kiora\"",
      "innerHTML": "\n<li>A: \"hello\" \"hey\" \"kiora\" \"world\" \"hi\"</li>\n<li>B: \"hello\" \"hi\" \"hey\" \"kiora\" \"world\"</li>\n<li>C: \"hello\" \"hi\" \"world\" \"hey\" \"kiora\"</li>\n<li>D: \"hello\" \"hi\" \"hey\" \"world\" \"kiora\"</li>\n",
      "options": [
        [
          "A",
          "\"hello\" \"hey\" \"kiora\" \"world\" \"hi\""
        ],
        [
          "B",
          "\"hello\" \"hi\" \"hey\" \"kiora\" \"world\""
        ],
        [
          "C",
          "\"hello\" \"hi\" \"world\" \"hey\" \"kiora\""
        ],
        [
          "D",
          "\"hello\" \"hi\" \"hey\" \"world\" \"kiora\""
        ]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-2\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>Given that three setTimeout() functions will be kept in the <code>task queue</code> before jumping back to <code>stack</code>, \"hello\" and \"hi\" will be printed first, then A is totally incorrect.</p>\n<p>We might have the feeling that three setTimeout() functions should be executed in the order \"world\" -&gt; \"hey\" -&gt; \"kiora\" providing that the time we have set are 0 mil second -&gt; 1 mil second -&gt; 2 mil second respectively. Yet, there is no different between 0 and 1 mil second. That is why we will see \"hey\" in the next. \"world\" is being executed then and following by the last on \"kiora\".</p>\n<p>For reference, read this <a href=\"https://stackoverflow.com/questions/8341803/difference-between-settimeoutfn-0-and-settimeoutfn-1\" rel=\"nofollow\">https://stackoverflow.com/questions/8341803/difference-between-settimeoutfn-0-and-settimeoutfn-1</a></p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "Given that three setTimeout() functions will be kept in the <code>task queue</code> before jumping back to <code>stack</code>, \"hello\" and \"hi\" will be printed first, then A is totally incorrect.",
        "We might have the feeling that three setTimeout() functions should be executed in the order \"world\" -&gt; \"hey\" -&gt; \"kiora\" providing that the time we have set are 0 mil second -&gt; 1 mil second -&gt; 2 mil second respectively. Yet, there is no different between 0 and 1 mil second. That is why we will see \"hey\" in the next. \"world\" is being executed then and following by the last on \"kiora\".",
        "For reference, read this <a href=\"https://stackoverflow.com/questions/8341803/difference-between-settimeoutfn-0-and-settimeoutfn-1\" rel=\"nofollow\">https://stackoverflow.com/questions/8341803/difference-between-settimeoutfn-0-and-settimeoutfn-1</a>"
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "12. What's the output?",
      "innerHTML": "<a id=\"user-content-12-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#12-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>12. What's the output?",
      "id": "user-content-12-whats-the-output",
      "index": "12",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "String.prototype.lengthy = () => {\n  console.log(\"hello\");\n};\n\nlet x = { name: \"Vuong\" };\n\ndelete x;\n\nx.name.lengthy();",
      "innerHTML": "<pre><span class=\"pl-v\">String</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">lengthy</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"hello\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"Vuong\"</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">delete</span> <span class=\"pl-s1\">x</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">x</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">lengthy</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: \"Vuong\";\nB: \"hello\";\nC: \"undefined\"\nD: \"ReferenceError\"",
      "innerHTML": "\n<li>A: \"Vuong\";</li>\n<li>B: \"hello\";</li>\n<li>C: \"undefined\"</li>\n<li>D: \"ReferenceError\"</li>\n",
      "options": [
        ["A", "\"Vuong\";"],
        ["B", "\"hello\";"],
        ["C", "\"undefined\""],
        ["D", "\"ReferenceError\""]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: B</h4>\n<p><code>String.prototype.someThing = function () {}</code> is the common way to define a new built-in method for <code>String</code>. We can do the same thing with <code>Array</code>, <code>Object</code> or <code>FunctionName</code> where FunctionName is the function designed by ourself.</p>\n<p>That is not challenging to realise that <code>\"string\".lengthy()</code> always returns <code>hello</code>. Yet, the tricky part lies in the <code>delete object</code> where we might think that this expression will entirely delete the object. That is not the case as <code>delete</code> is used to delete the property of the object only. It does not delete the object. Then we get <code>hello</code> rather than <code>ReferenceError</code>.</p>\n<p>Note that if we declare object without <code>let, const</code> or <code>var</code>, we then have a global object. <code>delete objectName</code> then return <code>true</code>. Otherwise, it always returns <code>false</code>.</p>\n<p></p>\n",
      "answer": "B",
      "description": [
        "<code>String.prototype.someThing = function () {}</code> is the common way to define a new built-in method for <code>String</code>. We can do the same thing with <code>Array</code>, <code>Object</code> or <code>FunctionName</code> where FunctionName is the function designed by ourself.",
        "That is not challenging to realise that <code>\"string\".lengthy()</code> always returns <code>hello</code>. Yet, the tricky part lies in the <code>delete object</code> where we might think that this expression will entirely delete the object. That is not the case as <code>delete</code> is used to delete the property of the object only. It does not delete the object. Then we get <code>hello</code> rather than <code>ReferenceError</code>.",
        "Note that if we declare object without <code>let, const</code> or <code>var</code>, we then have a global object. <code>delete objectName</code> then return <code>true</code>. Otherwise, it always returns <code>false</code>."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "13. What's the output?",
      "innerHTML": "<a id=\"user-content-13-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#13-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>13. What's the output?",
      "id": "user-content-13-whats-the-output",
      "index": "13",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "let x = {};\n\nx.__proto__.hi = 10;\n\nObject.prototype.hi = ++x.hi;\n\nconsole.log(x.hi + Object.keys(x).length);",
      "innerHTML": "<pre><span class=\"pl-k\">let</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">x</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">__proto__</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">hi</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">10</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">hi</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">++</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">hi</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">hi</span> <span class=\"pl-c1\">+</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">keys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 10\nB: 11\nC: 12\nD: NaN",
      "innerHTML": "\n<li>A: 10</li>\n<li>B: 11</li>\n<li>C: 12</li>\n<li>D: NaN</li>\n",
      "options": [
        ["A", "10"],
        ["B", "11"],
        ["C", "12"],
        ["D", "NaN"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-3\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-3\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: C</h4>\n<p>First we have an empty object <code>x</code>, then we add another property <code>hi</code> for x with <code>x.__proto__.hi</code>. Note this is equivalent to <code>Object.prototype.hi = 10</code> and we are adding to the <code>father</code> object <code>Object</code> the property <code>hi</code>. It means every single object will inherit this propety. The property <code>hi</code> becomes a shared one. Say now we declare a new object such as <code>let y = {}</code>, <code>y</code> now has a propery <code>hi</code> inherited from the <code>father</code> <code>Object</code>. Put it simply <code>x.__proto__ === Object.prototype</code> returns <code>true</code>.</p>\n<p>Then we overwrite the property <code>hi</code> with a new value 11. Last we have 11 + 1 = 12. <code>x</code> has one property and <code>x.hi</code> returns 11.</p>\n<p></p>\n",
      "answer": "C",
      "description": [
        "First we have an empty object <code>x</code>, then we add another property <code>hi</code> for x with <code>x.__proto__.hi</code>. Note this is equivalent to <code>Object.prototype.hi = 10</code> and we are adding to the <code>father</code> object <code>Object</code> the property <code>hi</code>. It means every single object will inherit this propety. The property <code>hi</code> becomes a shared one. Say now we declare a new object such as <code>let y = {}</code>, <code>y</code> now has a propery <code>hi</code> inherited from the <code>father</code> <code>Object</code>. Put it simply <code>x.__proto__ === Object.prototype</code> returns <code>true</code>.",
        "Then we overwrite the property <code>hi</code> with a new value 11. Last we have 11 + 1 = 12. <code>x</code> has one property and <code>x.hi</code> returns 11."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "14. What's the output?",
      "innerHTML": "<a id=\"user-content-14-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#14-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>14. What's the output?",
      "id": "user-content-14-whats-the-output",
      "index": "14",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const array = (a) => {\n  let length = a.length;\n  delete a[length - 1];\n  return a.length;\n};\n\nconsole.log(array([1, 2, 3, 4]));\n\nconst object = (obj) => {\n  let key = Object.keys(obj);\n  let length = key.length;\n  delete obj[key[length - 1]];\n\n  return Object.keys(obj).length;\n};\n\nconsole.log(object({ 1: 2, 2: 3, 3: 4, 4: 5 }));\n\nconst setPropNull = (obj) => {\n  let key = Object.keys(obj);\n  let length = key.length;\n  obj[key[length - 1]] = null;\n\n  return Object.keys(obj).length;\n};\n\nconsole.log(setPropNull({ 1: 2, 2: 3, 3: 4, 4: 5 }));",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-en\">array</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">length</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">delete</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">length</span> <span class=\"pl-c1\">-</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">array</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">4</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">object</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">key</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">keys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">length</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">key</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">delete</span> <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">length</span> <span class=\"pl-c1\">-</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">keys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">object</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">1</span>: <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span>: <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">4</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">4</span>: <span class=\"pl-c1\">5</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">setPropNull</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">key</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">keys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">length</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">key</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">length</span> <span class=\"pl-c1\">-</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">keys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">setPropNull</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">1</span>: <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span>: <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">4</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">4</span>: <span class=\"pl-c1\">5</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 333\nB: 444\nC: 434\nD: 343",
      "innerHTML": "\n<li>A: 333</li>\n<li>B: 444</li>\n<li>C: 434</li>\n<li>D: 343</li>\n",
      "options": [
        ["A", "333"],
        ["B", "444"],
        ["C", "434"],
        ["D", "343"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-4\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-4\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: C</h4>\n<p>This question examines how the <code>delete</code> operator works in JavaScript. In short, it does nothing when we write <code>delete someObject</code> or <code>delete someArray</code>. It nonetheless completely deletes and removes a property of an object when writing something like <code>delete someObject.someProperty</code>. In the case of array, when we write <code>delete someArray[keyNumber]</code>, it only removes the <code>value</code> of the <code>index</code>, keep the <code>index</code> intact and the new <code>value</code> is now set to <code>undefined</code>. For that reason, in the code first snippet, we get (the length) 4 elements as in the original array but only 3 properties left in the object passed when the function object() is called, as in the second snippet.</p>\n<p>The third snippet gives us 4 as declaring an object's propery to either <code>null</code> or <code>undefined</code> does not completely remove the property. The key is intact. So the length of the object is immutable.</p>\n<p>For those who are familiar with PHP, we have <code>unset($someArray[index])</code> that remove the array element, both key and value. When <code>print_r</code> the array, we might not see the key and value that have been unset. However, when we push (using <code>array_push($someArray, $someValue)</code>) a new element in that array, we might see that the previous key is still kept, but no value and not being displayed. That is something you should be aware of. Have a look at <a href=\"https://3v4l.org/7C3Nf\" rel=\"nofollow\">https://3v4l.org/7C3Nf</a></p>\n<p></p>\n",
      "answer": "C",
      "description": [
        "This question examines how the <code>delete</code> operator works in JavaScript. In short, it does nothing when we write <code>delete someObject</code> or <code>delete someArray</code>. It nonetheless completely deletes and removes a property of an object when writing something like <code>delete someObject.someProperty</code>. In the case of array, when we write <code>delete someArray[keyNumber]</code>, it only removes the <code>value</code> of the <code>index</code>, keep the <code>index</code> intact and the new <code>value</code> is now set to <code>undefined</code>. For that reason, in the code first snippet, we get (the length) 4 elements as in the original array but only 3 properties left in the object passed when the function object() is called, as in the second snippet.",
        "The third snippet gives us 4 as declaring an object's propery to either <code>null</code> or <code>undefined</code> does not completely remove the property. The key is intact. So the length of the object is immutable.",
        "For those who are familiar with PHP, we have <code>unset($someArray[index])</code> that remove the array element, both key and value. When <code>print_r</code> the array, we might not see the key and value that have been unset. However, when we push (using <code>array_push($someArray, $someValue)</code>) a new element in that array, we might see that the previous key is still kept, but no value and not being displayed. That is something you should be aware of. Have a look at <a href=\"https://3v4l.org/7C3Nf\" rel=\"nofollow\">https://3v4l.org/7C3Nf</a>"
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "15. What's the output?",
      "innerHTML": "<a id=\"user-content-15-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#15-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>15. What's the output?",
      "id": "user-content-15-whats-the-output",
      "index": "15",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "var a = [1, 2, 3];\nvar b = [1, 2, 3];\n\nvar c = [1, 2, 3];\nvar d = c;\n\nvar e = [1, 2, 3];\nvar f = e.slice();\n\nconsole.log(a === b);\nconsole.log(c === d);\nconsole.log(e === f);",
      "innerHTML": "<pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">b</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">c</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">d</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">c</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">e</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">f</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">e</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">slice</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">b</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">c</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">d</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">e</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">f</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: true true true\nB: false false true\nC: true true false\nD: false true false",
      "innerHTML": "\n<li>A: true true true</li>\n<li>B: false false true</li>\n<li>C: true true false</li>\n<li>D: false true false</li>\n",
      "options": [
        ["A", "true true true"],
        ["B", "false false true"],
        ["C", "true true false"],
        ["D", "false true false"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-3\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-3\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p><code>a</code> and <code>b</code> returns false because they point to different memory location even though the values are the same. If you are coming from PHP world, then it will return true obviously when we compare either value or value + type. Check it out: <a href=\"https://3v4l.org/IjaOs\" rel=\"nofollow\">https://3v4l.org/IjaOs</a>.</p>\n<p>In JavaScript, value is passed by reference in case of <code>array</code> and <code>object</code>. Hence in the second case, <code>d</code> is the copy of <code>c</code> but they both point to the same memory position. Everything changes in <code>c</code> will result in the change in <code>d</code>. In PHP, we might have <code>$a = &amp;$b;</code>, working in the similar way.</p>\n<p>The third one gives us a hint to copy an array in JavaScript using <code>slice()</code> method. Now we have <code>f</code>, which is the copy of <code>e</code> but they point to different memory locations, thus they have different \"life\". We get <code>false</code> accordingly when they are being compared.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "<code>a</code> and <code>b</code> returns false because they point to different memory location even though the values are the same. If you are coming from PHP world, then it will return true obviously when we compare either value or value + type. Check it out: <a href=\"https://3v4l.org/IjaOs\" rel=\"nofollow\">https://3v4l.org/IjaOs</a>.",
        "In JavaScript, value is passed by reference in case of <code>array</code> and <code>object</code>. Hence in the second case, <code>d</code> is the copy of <code>c</code> but they both point to the same memory position. Everything changes in <code>c</code> will result in the change in <code>d</code>. In PHP, we might have <code>$a = &amp;$b;</code>, working in the similar way.",
        "The third one gives us a hint to copy an array in JavaScript using <code>slice()</code> method. Now we have <code>f</code>, which is the copy of <code>e</code> but they point to different memory locations, thus they have different \"life\". We get <code>false</code> accordingly when they are being compared."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "16. What's the output?",
      "innerHTML": "<a id=\"user-content-16-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#16-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>16. What's the output?",
      "id": "user-content-16-whats-the-output",
      "index": "16",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "var languages = {\n  name: [\"elixir\", \"golang\", \"js\", \"php\", { name: \"feature\" }],\n  feature: \"awesome\",\n};\n\nlet flag = languages.hasOwnProperty(Object.values(languages)[0][4].name);\n\n(() => {\n  if (flag !== false) {\n    console.log(\n      Object.getOwnPropertyNames(languages)[0].length <<\n        Object.keys(languages)[0].length\n    );\n  } else {\n    console.log(\n      Object.getOwnPropertyNames(languages)[1].length <<\n        Object.keys(languages)[1].length\n    );\n  }\n})();",
      "innerHTML": "<pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">languages</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">name</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">\"elixir\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"golang\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"js\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"php\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"feature\"</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">feature</span>: <span class=\"pl-s\">\"awesome\"</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">flag</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">languages</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">hasOwnProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">values</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">languages</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">4</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">flag</span> !== <span class=\"pl-c1\">false</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span>\n      <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getOwnPropertyNames</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">languages</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">&lt;&lt;</span>\n        <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">keys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">languages</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span>\n    <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span>\n      <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getOwnPropertyNames</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">languages</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">&lt;&lt;</span>\n        <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">keys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">languages</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span>\n    <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 8\nB: NaN\nC: 64\nD: 12",
      "innerHTML": "\n<li>A: 8</li>\n<li>B: NaN</li>\n<li>C: 64</li>\n<li>D: 12</li>\n",
      "options": [
        ["A", "8"],
        ["B", "NaN"],
        ["C", "64"],
        ["D", "12"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-64\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-64\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: 64</h4>\n<p>The code snippet is quite tricky as it has a couple of different built-in methods handling object in <code>JavaScript</code>. For example, both <code>Object.keys</code> and <code>Object.getOwnPropertyNames</code> are used even thought they are quite similar except that the latter can return non-enumerable properties. You might want to have a look at this thoroughly written reference <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames</a></p>\n<p><code>Object.values</code> and <code>Object.keys</code> return the property value and property name of the object, respectively. That is nothing new. <code>object.hasOwnProperty('propertyName')</code> returns a <code>boolean</code> confirming whether a property exists or not.</p>\n<p>We have <code>flag</code> true because <code>Object.values(languages)[0][4].name</code> returns <code>feature</code>, which is also the name of the property.</p>\n<p>Then we have 4 &lt;&lt; 4 in the <code>if-else</code> flow that returns the bitwise value, equivalent to <code>4*2^4</code> ~ <code>4*16</code> ~ 64.</p>\n<p></p>\n",
      "answer": "64",
      "description": [
        "The code snippet is quite tricky as it has a couple of different built-in methods handling object in <code>JavaScript</code>. For example, both <code>Object.keys</code> and <code>Object.getOwnPropertyNames</code> are used even thought they are quite similar except that the latter can return non-enumerable properties. You might want to have a look at this thoroughly written reference <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames</a>",
        "<code>Object.values</code> and <code>Object.keys</code> return the property value and property name of the object, respectively. That is nothing new. <code>object.hasOwnProperty('propertyName')</code> returns a <code>boolean</code> confirming whether a property exists or not.",
        "We have <code>flag</code> true because <code>Object.values(languages)[0][4].name</code> returns <code>feature</code>, which is also the name of the property.",
        "Then we have 4 &lt;&lt; 4 in the <code>if-else</code> flow that returns the bitwise value, equivalent to <code>4*2^4</code> ~ <code>4*16</code> ~ 64."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "17. What's the output?",
      "innerHTML": "<a id=\"user-content-17-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#17-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>17. What's the output?",
      "id": "user-content-17-whats-the-output",
      "index": "17",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "var player = {\n  name: \"Ronaldo\",\n  age: 34,\n  getAge: function () {\n    return ++this.age - this.name.length;\n  },\n};\n\nfunction score(greeting, year) {\n  console.log(\n    greeting + \" \" + this.name + `! You were born in  ${year - this.getAge()}`\n  );\n}\n\nwindow.window.window.score.call(window.window.window.player, \"Kiora\", 2019);\n\nscore.apply(player, [\"Kiora\", 2009]);\n\nconst helloRonaldo = window.score.bind(window.player, \"Kiora\", 2029);\n\nhelloRonaldo();",
      "innerHTML": "<pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">player</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"Ronaldo\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">age</span>: <span class=\"pl-c1\">34</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">getAge</span>: <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">++</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span> <span class=\"pl-c1\">-</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">score</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">greeting</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">year</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span>\n    <span class=\"pl-s1\">greeting</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s\">\" \"</span> <span class=\"pl-c1\">+</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s\">`! You were born in  <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">year</span> <span class=\"pl-c1\">-</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getAge</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span></span>`</span>\n  <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-smi\">window</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">window</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">window</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">score</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">window</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">window</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">window</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">player</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"Kiora\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2019</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">score</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">player</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-s\">\"Kiora\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2009</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">helloRonaldo</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">window</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">score</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">window</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">player</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"Kiora\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2029</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">helloRonaldo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: \"Kiora Ronaldo! You were born in 1985\", \"Kiora Ronaldo! You were born in 1985\", \"Kiora Ronaldo! You were born in 1985\"\nB: \"Kiora Ronaldo! You were born in 1991\", \"Kiora Ronaldo! You were born in 1991\", \"Kiora Ronaldo! You were born in 1999\"\nC: \"Kiora Ronaldo! You were born in 1991\", NaN, \"Kiora Ronaldo! You were born in 1980\"\nD: \"Kiora Ronaldo! You were born in 1991\", \"Kiora Ronaldo! You were born in 1980\", \"Kiora Ronaldo! You were born in 1999\"",
      "innerHTML": "\n<li>A: \"Kiora Ronaldo! You were born in 1985\", \"Kiora Ronaldo! You were born in 1985\", \"Kiora Ronaldo! You were born in 1985\"</li>\n<li>B: \"Kiora Ronaldo! You were born in 1991\", \"Kiora Ronaldo! You were born in 1991\", \"Kiora Ronaldo! You were born in 1999\"</li>\n<li>C: \"Kiora Ronaldo! You were born in 1991\", NaN, \"Kiora Ronaldo! You were born in 1980\"</li>\n<li>D: \"Kiora Ronaldo! You were born in 1991\", \"Kiora Ronaldo! You were born in 1980\", \"Kiora Ronaldo! You were born in 1999\"</li>\n",
      "options": [
        [
          "A",
          "\"Kiora Ronaldo! You were born in 1985\", \"Kiora Ronaldo! You were born in 1985\", \"Kiora Ronaldo! You were born in 1985\""
        ],
        [
          "B",
          "\"Kiora Ronaldo! You were born in 1991\", \"Kiora Ronaldo! You were born in 1991\", \"Kiora Ronaldo! You were born in 1999\""
        ],
        [
          "C",
          "\"Kiora Ronaldo! You were born in 1991\", NaN, \"Kiora Ronaldo! You were born in 1980\""
        ],
        [
          "D",
          "\"Kiora Ronaldo! You were born in 1991\", \"Kiora Ronaldo! You were born in 1980\", \"Kiora Ronaldo! You were born in 1999\""
        ]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-4\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-4\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>We can use <code>call()</code>, <code>apply()</code> and <code>bind()</code> to appy a function to any object. At first sight, it seems that three functions do the same thing. Yet there are some situations where they are differently employed to handle respective contexts or solve particular problems.</p>\n<p>Of the three, only <code>bind()</code> can be executed after binding. We can create a variable to store the result as <code>helloRonaldo()</code> in the code snippet above. <code>apply()</code> and <code>call()</code> will bind and execute the function at the same time. <code>apply()</code> hints us <code>a</code> ~ array where we need to pass an array as parameter. <code>call()</code> hints us <code>c</code> or comma where we pass parameters with a comma. You might want to have a look at this post <a href=\"https://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind\" rel=\"nofollow\">https://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind</a></p>\n<p>Note that <code>window.window.window.score</code> or <code>window.score</code> or simply <code>score</code> do the same thing. It points to the <code>score()</code> function in the global scope.</p>\n<p>The correct anwser is D. The <code>score()</code> and <code>getAge()</code> functions are nothing special.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "We can use <code>call()</code>, <code>apply()</code> and <code>bind()</code> to appy a function to any object. At first sight, it seems that three functions do the same thing. Yet there are some situations where they are differently employed to handle respective contexts or solve particular problems.",
        "Of the three, only <code>bind()</code> can be executed after binding. We can create a variable to store the result as <code>helloRonaldo()</code> in the code snippet above. <code>apply()</code> and <code>call()</code> will bind and execute the function at the same time. <code>apply()</code> hints us <code>a</code> ~ array where we need to pass an array as parameter. <code>call()</code> hints us <code>c</code> or comma where we pass parameters with a comma. You might want to have a look at this post <a href=\"https://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind\" rel=\"nofollow\">https://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind</a>",
        "Note that <code>window.window.window.score</code> or <code>window.score</code> or simply <code>score</code> do the same thing. It points to the <code>score()</code> function in the global scope.",
        "The correct anwser is D. The <code>score()</code> and <code>getAge()</code> functions are nothing special."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "18. What's the output?",
      "innerHTML": "<a id=\"user-content-18-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#18-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>18. What's the output?",
      "id": "user-content-18-whats-the-output",
      "index": "18",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "var ronaldo = { age: 34 };\n\nvar messi = { age: 32 };\n\nfunction score(year, tr, t) {\n  if (typeof tr === \"function\" && typeof t === \"function\") {\n    console.log(`You score ${tr(year, t(this.age))} times`);\n  }\n}\n\nconst transform = (x, y) => x - y;\n\nconst title = (x) => ++x + x++;\n\nconst helloRonaldo = score.bind(ronaldo, 2029, transform, title);\n\nhelloRonaldo();\n\nconst helloMessi = score.bind(messi, 2029, transform, title);\n\nhelloMessi();",
      "innerHTML": "<pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">ronaldo</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">age</span>: <span class=\"pl-c1\">34</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">messi</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">age</span>: <span class=\"pl-c1\">32</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">score</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">year</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">tr</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">t</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">tr</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">\"function\"</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">t</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">\"function\"</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`You score <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">tr</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">year</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">t</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span></span> times`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">transform</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">y</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">-</span> <span class=\"pl-s1\">y</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">title</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-c1\">++</span><span class=\"pl-s1\">x</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">x</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">helloRonaldo</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">score</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ronaldo</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2029</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">transform</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">title</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">helloRonaldo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">helloMessi</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">score</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">messi</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2029</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">transform</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">title</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">helloMessi</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: \"You score 1989 times\" and \"You score 1963 times\"\nB: \"You score 1959 times\" and \"You score 1989 times\"\nC: \"You score 1989 times\" and \"You score 1953 times\"\nD: \"You score 1959 times\" and \"You score 1963 times\"",
      "innerHTML": "\n<li>A: \"You score 1989 times\" and \"You score 1963 times\"</li>\n<li>B: \"You score 1959 times\" and \"You score 1989 times\"</li>\n<li>C: \"You score 1989 times\" and \"You score 1953 times\"</li>\n<li>D: \"You score 1959 times\" and \"You score 1963 times\"</li>\n",
      "options": [
        [
          "A",
          "\"You score 1989 times\" and \"You score 1963 times\""
        ],
        [
          "B",
          "\"You score 1959 times\" and \"You score 1989 times\""
        ],
        [
          "C",
          "\"You score 1989 times\" and \"You score 1953 times\""
        ],
        [
          "D",
          "\"You score 1959 times\" and \"You score 1963 times\""
        ]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-5\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-5\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p><code>bind()</code> allows us to bind a function declared with any object. Here we bind <code>score()</code> and both <code>ronaldo</code> and <code>messi</code>.</p>\n<p>In <code>score()</code> we pass three parameters <code>year</code>, <code>tr</code> and <code>t</code> in which both <code>tr</code> and <code>t</code> are function. They handle simple things as defined afterwards.</p>\n<p>When we bind <code>score()</code> with <code>ronaldo</code> and <code>messi</code>, we pass three parameters as declared in the <code>score()</code> function wherein <code>transform</code> and <code>title</code> are functions.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "<code>bind()</code> allows us to bind a function declared with any object. Here we bind <code>score()</code> and both <code>ronaldo</code> and <code>messi</code>.",
        "In <code>score()</code> we pass three parameters <code>year</code>, <code>tr</code> and <code>t</code> in which both <code>tr</code> and <code>t</code> are function. They handle simple things as defined afterwards.",
        "When we bind <code>score()</code> with <code>ronaldo</code> and <code>messi</code>, we pass three parameters as declared in the <code>score()</code> function wherein <code>transform</code> and <code>title</code> are functions."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "19. What's the output?",
      "innerHTML": "<a id=\"user-content-19-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#19-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>19. What's the output?",
      "id": "user-content-19-whats-the-output",
      "index": "19",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "var person = {};\n\nObject.defineProperties(person, {\n  name: {\n    value: \"Vuong\",\n    enumerable: true,\n  },\n  job: {\n    value: \"developer\",\n    enumerable: true,\n  },\n  studying: {\n    value: \"PhD\",\n    enumerable: true,\n  },\n  money: {\n    value: \"NZD\",\n    enumerable: false,\n  },\n});\n\nclass Evaluate {\n  static checkFlag(obj) {\n    return Object.getOwnPropertyNames(obj) > Object.keys(obj)\n      ? Object.getOwnPropertyNames(obj)\n      : Object.keys(obj);\n  }\n}\n\nconst flag = Evaluate.checkFlag(person);\n\nconsole.log(flag.length);",
      "innerHTML": "<pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">person</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">defineProperties</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">person</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">name</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">value</span>: <span class=\"pl-s\">\"Vuong\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">enumerable</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">job</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">value</span>: <span class=\"pl-s\">\"developer\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">enumerable</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">studying</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">value</span>: <span class=\"pl-s\">\"PhD\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">enumerable</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">money</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">value</span>: <span class=\"pl-s\">\"NZD\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">enumerable</span>: <span class=\"pl-c1\">false</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-v\">Evaluate</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">static</span> <span class=\"pl-en\">checkFlag</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getOwnPropertyNames</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">keys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span>\n      ? <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getOwnPropertyNames</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span>\n      : <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">keys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">flag</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Evaluate</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">checkFlag</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">person</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">flag</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 1\nB: 2\nC: 3\nD: 4",
      "innerHTML": "\n<li>A: 1</li>\n<li>B: 2</li>\n<li>C: 3</li>\n<li>D: 4</li>\n",
      "options": [
        ["A", "1"],
        ["B", "2"],
        ["C", "3"],
        ["D", "4"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-6\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-6\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p><code>Object.keys(obj)</code> is almost identical to <code>Object.getOwnPropertyNames(obj)</code> except the fact that the latter returns any type of object's property regardless of <code>enumerable</code>. By default <code>enumerable</code> is true when creating object. Using <code>Object.defineProperties</code> or <code>Object.defineProperty</code> we can manually set this option to <code>false</code>.</p>\n<p>As such the object <code>person</code> will get 3 using<code>Object.keys(obj)</code>but 4 with <code>Object.getOwnPropertyNames(obj)</code>. <code>In short Object.keys(obj)</code> only returns the property setting the enumerable as <code>true</code>.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "<code>Object.keys(obj)</code> is almost identical to <code>Object.getOwnPropertyNames(obj)</code> except the fact that the latter returns any type of object's property regardless of <code>enumerable</code>. By default <code>enumerable</code> is true when creating object. Using <code>Object.defineProperties</code> or <code>Object.defineProperty</code> we can manually set this option to <code>false</code>.",
        "As such the object <code>person</code> will get 3 using<code>Object.keys(obj)</code>but 4 with <code>Object.getOwnPropertyNames(obj)</code>. <code>In short Object.keys(obj)</code> only returns the property setting the enumerable as <code>true</code>."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "20. What's the output?",
      "innerHTML": "<a id=\"user-content-20-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#20-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>20. What's the output?",
      "id": "user-content-20-whats-the-output",
      "index": "20",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const id = 10;\n\nconst getID = (...id) => {\n  id(id);\n\n  function id(id) {\n    console.log(typeof id);\n  }\n};\n\ngetID(id);",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">id</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">10</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">getID</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">id</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-s1\">id</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">id</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">function</span> <span class=\"pl-s1\">id</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">id</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">id</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">getID</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">id</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: ReferenceError\nB: 10\nC: undefined\nD: 'function'",
      "innerHTML": "\n<li>A: ReferenceError</li>\n<li>B: 10</li>\n<li>C: undefined</li>\n<li>D: 'function'</li>\n",
      "options": [
        ["A", "ReferenceError"],
        ["B", "10"],
        ["C", "undefined"],
        ["D", "'function'"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-7\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-7\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>When declaring a function inside another function, we are working with Closure in JavaScript. Note that if a function is declared as normal (rather than function expression), it is hoisted. We might see several <code>id</code> in the code snippet above but in fact, some of them does nothing.</p>\n<p>The result of the code depending on the operator <code>typeof id</code>, which is <code>function</code>. So <code>id</code> in this operation is the <code>id()</code> function.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "When declaring a function inside another function, we are working with Closure in JavaScript. Note that if a function is declared as normal (rather than function expression), it is hoisted. We might see several <code>id</code> in the code snippet above but in fact, some of them does nothing.",
        "The result of the code depending on the operator <code>typeof id</code>, which is <code>function</code>. So <code>id</code> in this operation is the <code>id()</code> function."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "21. What's the output?",
      "innerHTML": "<a id=\"user-content-21-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#21-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>21. What's the output?",
      "id": "user-content-21-whats-the-output",
      "index": "21",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "var book1 = {\n  name: \"Name of the rose\",\n  getName: function () {\n    console.log(this.name);\n  },\n};\n\nvar book2 = {\n  name: { value: \"Harry Potter\" },\n};\n\nvar bookCollection = Object.create(book1, book2);\n\nbookCollection.getName();",
      "innerHTML": "<pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">book1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"Name of the rose\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">getName</span>: <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">book2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">name</span>: <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">value</span>: <span class=\"pl-s\">\"Harry Potter\"</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">bookCollection</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">book1</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">book2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">bookCollection</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getName</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 'Harry Potter'\nB: 'Name of the rose'\nC: ReferenceError\nD: Object object",
      "innerHTML": "\n<li>A: 'Harry Potter'</li>\n<li>B: 'Name of the rose'</li>\n<li>C: ReferenceError</li>\n<li>D: Object object</li>\n",
      "options": [
        ["A", "'Harry Potter'"],
        ["B", "'Name of the rose'"],
        ["C", "ReferenceError"],
        ["D", "Object object"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-4\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-4\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: A</h4>\n<p><code>Object.create</code> allows us to create an object which is based on another object. If we do not pass the second parameter - <code>book2</code> in this case - the <code>name</code> property of the object <code>bookCollection</code> will be <code>Name of the rose</code> inherited from the <code>book1</code>. It means we can provide additional properties when declaring object with <code>Object.create</code>.</p>\n<p><code>bookCollection</code> has its own property <code>name</code> and another one inherited from <code>book1</code>. In this case its own property <code>name</code> will show up as it has higher priority. That is why we get 'Harry Potter'.</p>\n<p></p>\n",
      "answer": "A",
      "description": [
        "<code>Object.create</code> allows us to create an object which is based on another object. If we do not pass the second parameter - <code>book2</code> in this case - the <code>name</code> property of the object <code>bookCollection</code> will be <code>Name of the rose</code> inherited from the <code>book1</code>. It means we can provide additional properties when declaring object with <code>Object.create</code>.",
        "<code>bookCollection</code> has its own property <code>name</code> and another one inherited from <code>book1</code>. In this case its own property <code>name</code> will show up as it has higher priority. That is why we get 'Harry Potter'."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "22. What's the output?",
      "innerHTML": "<a id=\"user-content-22-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#22-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>22. What's the output?",
      "id": "user-content-22-whats-the-output",
      "index": "22",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "(() => {\n  const a = Object.create({});\n\n  const b = Object.create(null);\n\n  let f1 = a.hasOwnProperty(\"toString\");\n\n  let f2 = \"toString\" in b;\n\n  let result =\n    f1 === false && f2 === false\n      ? console.log((typeof a.toString()).length)\n      : console.log(b.toString());\n})();",
      "innerHTML": "<pre><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">b</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">f1</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">hasOwnProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"toString\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">f2</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"toString\"</span> <span class=\"pl-k\">in</span> <span class=\"pl-s1\">b</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span>\n    <span class=\"pl-s1\">f1</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">false</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">f2</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">false</span>\n      ? <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span>\n      : <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">b</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: ReferenceError\nB: undefined\nC: 0\nD: 6",
      "innerHTML": "\n<li>A: ReferenceError</li>\n<li>B: undefined</li>\n<li>C: 0</li>\n<li>D: 6</li>\n",
      "options": [
        ["A", "ReferenceError"],
        ["B", "undefined"],
        ["C", "0"],
        ["D", "6"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-8\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-8\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>The two objects <code>a</code> and <code>b</code> are created using <code>Object.create()</code> operator. There is a bit of difference between them as <code>a</code> inherits from Object prototype but <code>b</code> is totally empty when we pass the <code>null</code> paramater. Yet <code>hasOwnProperty('toString')</code> always returns <code>false</code> neither <code>a</code> nor <code>b</code> given that <code>toString()</code> is not defined inside these objects. The method however is still available as it is inherited from Object prototype.</p>\n<p>Both <code>f1</code> and <code>f2</code> return <code>false</code>. Note that we use <code>object.hasOwnProperty('key')</code> and <code>('key' in object)</code> to check the availability of a key in an object. There is a bit difference between the two as the latter also returns the key inherited. You might want to have a look here: <a href=\"https://stackoverflow.com/questions/455338/how-do-i-check-if-an-object-has-a-key-in-javascript\" rel=\"nofollow\">https://stackoverflow.com/questions/455338/how-do-i-check-if-an-object-has-a-key-in-javascript</a></p>\n<p>Then <code>typeof a.toString()</code> returns <code>string</code>, which gives us 6 with the <code>.length</code> property.</p>\n<p>If the syntax is odd to you, you might look for 'self-invoking function' and 'arrow function' in JavaScript.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "The two objects <code>a</code> and <code>b</code> are created using <code>Object.create()</code> operator. There is a bit of difference between them as <code>a</code> inherits from Object prototype but <code>b</code> is totally empty when we pass the <code>null</code> paramater. Yet <code>hasOwnProperty('toString')</code> always returns <code>false</code> neither <code>a</code> nor <code>b</code> given that <code>toString()</code> is not defined inside these objects. The method however is still available as it is inherited from Object prototype.",
        "Both <code>f1</code> and <code>f2</code> return <code>false</code>. Note that we use <code>object.hasOwnProperty('key')</code> and <code>('key' in object)</code> to check the availability of a key in an object. There is a bit difference between the two as the latter also returns the key inherited. You might want to have a look here: <a href=\"https://stackoverflow.com/questions/455338/how-do-i-check-if-an-object-has-a-key-in-javascript\" rel=\"nofollow\">https://stackoverflow.com/questions/455338/how-do-i-check-if-an-object-has-a-key-in-javascript</a>",
        "Then <code>typeof a.toString()</code> returns <code>string</code>, which gives us 6 with the <code>.length</code> property.",
        "If the syntax is odd to you, you might look for 'self-invoking function' and 'arrow function' in JavaScript."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "23. What's the output?",
      "innerHTML": "<a id=\"user-content-23-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#23-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>23. What's the output?",
      "id": "user-content-23-whats-the-output",
      "index": "23",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "let promise = new Promise((rs, rj) => {\n  setTimeout(() => rs(4), 0);\n\n  Promise.resolve(console.log(3));\n\n  console.log(2);\n});\n\npromise\n  .then((rs) => {\n    console.log(rs ? rs ** rs : rs);\n    return rs;\n  })\n  .then((rs) => console.log(rs == 256 ? rs : rs * rs));",
      "innerHTML": "<pre><span class=\"pl-k\">let</span> <span class=\"pl-s1\">promise</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">rs</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">rj</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">rs</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">4</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">promise</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">rs</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">rs</span> ? <span class=\"pl-s1\">rs</span> ** <span class=\"pl-s1\">rs</span> : <span class=\"pl-s1\">rs</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">rs</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">rs</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">rs</span> <span class=\"pl-c1\">==</span> <span class=\"pl-c1\">256</span> ? <span class=\"pl-s1\">rs</span> : <span class=\"pl-s1\">rs</span> * <span class=\"pl-s1\">rs</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 3, 2, 256, 256\nB: 3, 2, 256, 16\nC: 256, 16, 3, 2\nD: 16, 256, 3, 2",
      "innerHTML": "\n<li>A: 3, 2, 256, 256</li>\n<li>B: 3, 2, 256, 16</li>\n<li>C: 256, 16, 3, 2</li>\n<li>D: 16, 256, 3, 2</li>\n",
      "options": [
        ["A", "3, 2, 256, 256"],
        ["B", "3, 2, 256, 16"],
        ["C", "256, 16, 3, 2"],
        ["D", "16, 256, 3, 2"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-2\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: B</h4>\n<p>We first declare a promise-based code with <code>let</code> and then call it. Given that <code>setTimeout()</code> is an asynchronous action, it will run last even the time is set to 0 in <code>setTimeout(() =&gt; rs(4), 0);</code>. Although <code>Promise.resolve(console.log(3))</code> also returns a promise but it is a Microtasks, then it has a higher priority than Tasks as set by <code>setTimeout()</code>. You might want to have a look at this post <a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" rel=\"nofollow\">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a>.</p>\n<p>In <code>.then()</code> we chain the result so that we have <code>4^4</code> in the first then() and <code>4*4</code> in the second <code>then()</code>. Note that <code>return rs</code> returns the original value.</p>\n<p></p>\n",
      "answer": "B",
      "description": [
        "We first declare a promise-based code with <code>let</code> and then call it. Given that <code>setTimeout()</code> is an asynchronous action, it will run last even the time is set to 0 in <code>setTimeout(() =&gt; rs(4), 0);</code>. Although <code>Promise.resolve(console.log(3))</code> also returns a promise but it is a Microtasks, then it has a higher priority than Tasks as set by <code>setTimeout()</code>. You might want to have a look at this post <a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" rel=\"nofollow\">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a>.",
        "In <code>.then()</code> we chain the result so that we have <code>4^4</code> in the first then() and <code>4*4</code> in the second <code>then()</code>. Note that <code>return rs</code> returns the original value."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "24. What's the output?",
      "innerHTML": "<a id=\"user-content-24-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#24-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>24. What's the output?",
      "id": "user-content-24-whats-the-output",
      "index": "24",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "async function f() {\n  let promise = new Promise((resolve, reject) => {\n    setTimeout(() => resolve(\"done!\"), 0);\n  });\n\n  setTimeout(() => console.log(\"world\"), 0);\n\n  console.log(await promise);\n\n  console.log(\"hello\");\n}\n\nf(setTimeout(() => console.log(\"kiora\"), 0));",
      "innerHTML": "<pre><span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">f</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">promise</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">reject</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"done!\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"world\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">await</span> <span class=\"pl-s1\">promise</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"hello\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-en\">f</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"kiora\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: ReferenceError\nB: done, hello, world\nC: hello, done, world\nD: kiora, done, hello, world",
      "innerHTML": "\n<li>A: ReferenceError</li>\n<li>B: done, hello, world</li>\n<li>C: hello, done, world</li>\n<li>D: kiora, done, hello, world</li>\n",
      "options": [
        ["A", "ReferenceError"],
        ["B", "done, hello, world"],
        ["C", "hello, done, world"],
        ["D", "kiora, done, hello, world"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-9\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-9\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>Though we do not declare any paramater for the function <code>f()</code>, we pass <code>setTimeout(()=&gt;console.log(\"kiora\"),0)</code> when call it. We therefore get 'kiora' first.</p>\n<p>Given that the variable <code>promise</code> returns a solved promise and it is called with the keyword <code>await</code>, JavaScript will 'pause' at this line <code>console.log(await promise);</code> till the result is resolved. That is why we get \"done\" at the next result.</p>\n<p>Why we do not get \"world\" or \"hello\" at the second ? As JavaScript \"pauses\" at the line with <code>await</code> keyword, we cannot get \"hello\" as usual (note that whenever we call setTimeout(), this function will run last because it is an asynchronous task operator), whereas <code>setTimeout(()=&gt; console.log(\"world\"), 0);</code> should always run last.</p>\n<p>Here we might see a bit of difference when employing <code>await</code> keyword before asynchronous operator (in this case, we use <code>setTimeout()</code> as an example) or when call the function/operator without it.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "Though we do not declare any paramater for the function <code>f()</code>, we pass <code>setTimeout(()=&gt;console.log(\"kiora\"),0)</code> when call it. We therefore get 'kiora' first.",
        "Given that the variable <code>promise</code> returns a solved promise and it is called with the keyword <code>await</code>, JavaScript will 'pause' at this line <code>console.log(await promise);</code> till the result is resolved. That is why we get \"done\" at the next result.",
        "Why we do not get \"world\" or \"hello\" at the second ? As JavaScript \"pauses\" at the line with <code>await</code> keyword, we cannot get \"hello\" as usual (note that whenever we call setTimeout(), this function will run last because it is an asynchronous task operator), whereas <code>setTimeout(()=&gt; console.log(\"world\"), 0);</code> should always run last.",
        "Here we might see a bit of difference when employing <code>await</code> keyword before asynchronous operator (in this case, we use <code>setTimeout()</code> as an example) or when call the function/operator without it."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "25. What's the output?",
      "innerHTML": "<a id=\"user-content-25-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#25-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>25. What's the output?",
      "id": "user-content-25-whats-the-output",
      "index": "25",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "function name() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"New Zealand\");\n    }, 10);\n  });\n}\n\nfunction fruit() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"Kiwi\");\n    }, 20);\n  });\n}\n\n(async function countryandfruit() {\n  const getName = await name();\n  const getFruit = await fruit();\n\n  console.log(`Kiora: ${getName} ${getFruit}`);\n})();\n\n(async function fruitandcountry() {\n  const [getName, getFruit] = await Promise.all([name(), fruit()]);\n\n  console.log(`Hello: ${getName} ${getFruit}`);\n})();",
      "innerHTML": "<pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">name</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"New Zealand\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">10</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">fruit</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Kiwi\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">20</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">countryandfruit</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">getName</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">name</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">getFruit</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fruit</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Kiora: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">getName</span><span class=\"pl-kos\">}</span></span> <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">getFruit</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">fruitandcountry</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">getName</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">getFruit</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">all</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-en\">name</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">fruit</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`Hello: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">getName</span><span class=\"pl-kos\">}</span></span> <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">getFruit</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: Null\nB: Kiora\nC: \"Hello: New Zealand Kiwi\" -> \"Kiora: New Zealand Kiwi\"\nD: \"Kiora: New Zealand Kiwi\" -> \"Hello: New Zealand Kiwi\"",
      "innerHTML": "\n<li>A: Null</li>\n<li>B: Kiora</li>\n<li>C: \"Hello: New Zealand Kiwi\" -&gt; \"Kiora: New Zealand Kiwi\"</li>\n<li>D: \"Kiora: New Zealand Kiwi\" -&gt; \"Hello: New Zealand Kiwi\"</li>\n",
      "options": [
        ["A", "Null"],
        ["B", "Kiora"],
        [
          "C",
          "\"Hello",
          "New Zealand Kiwi\" -&gt; \"Kiora",
          "New Zealand Kiwi\""
        ],
        [
          "D",
          "\"Kiora",
          "New Zealand Kiwi\" -&gt; \"Hello",
          "New Zealand Kiwi\""
        ]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-5\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-5\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: C</h4>\n<p>Both <code>countryandfruit</code> and <code>fruitandcountry</code> are self invoking functions. Both are declared with the keyword <code>async</code>, it means the code inside will run step by step. It helps us control the flow of data much more concise as compared to Promise-based operator or callback way.</p>\n<p>The first function returns <code>\"Kiora: New Zealand Kiwi\"</code> and the second one ouputs <code>\"Hello: New Zealand Kiwi\"</code>. We might think that the order will be the same but actually the order of the result is reversed because the function with <code>await</code> keyword will run step by step rather than in in parallel as Promise.all. It means <code>fruitandcountry</code> will run faster than <code>countryandfruit</code>.</p>\n<p>You might want to have a look at the difference between the two at <a href=\"https://alligator.io/js/async-functions/\" rel=\"nofollow\">https://alligator.io/js/async-functions/</a></p>\n<p></p>\n",
      "answer": "C",
      "description": [
        "Both <code>countryandfruit</code> and <code>fruitandcountry</code> are self invoking functions. Both are declared with the keyword <code>async</code>, it means the code inside will run step by step. It helps us control the flow of data much more concise as compared to Promise-based operator or callback way.",
        "The first function returns <code>\"Kiora: New Zealand Kiwi\"</code> and the second one ouputs <code>\"Hello: New Zealand Kiwi\"</code>. We might think that the order will be the same but actually the order of the result is reversed because the function with <code>await</code> keyword will run step by step rather than in in parallel as Promise.all. It means <code>fruitandcountry</code> will run faster than <code>countryandfruit</code>.",
        "You might want to have a look at the difference between the two at <a href=\"https://alligator.io/js/async-functions/\" rel=\"nofollow\">https://alligator.io/js/async-functions/</a>"
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "26. What's the output?",
      "innerHTML": "<a id=\"user-content-26-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#26-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>26. What's the output?",
      "id": "user-content-26-whats-the-output",
      "index": "26",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "class MySort {\n  constructor(object) {\n    this.object = object;\n  }\n\n  getSort() {\n    return Object.entries(this.object)[0][1].sort()[\n      Object.values(this.object).length\n    ];\n  }\n}\n\nconst object = {\n  month: [\"July\", \"September\", \"January\", \"December\"],\n};\n\nconst sortMe = new MySort(object);\n\nconsole.log(sortMe.getSort());",
      "innerHTML": "<pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">MySort</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">object</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">object</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">object</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">getSort</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">entries</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">object</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">sort</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">[</span>\n      <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">values</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">object</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span>\n    <span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">object</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">month</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">\"July\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"September\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"January\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"December\"</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">sortMe</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">MySort</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">object</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">sortMe</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getSort</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: July\nB: September\nC: January\nD: December",
      "innerHTML": "\n<li>A: July</li>\n<li>B: September</li>\n<li>C: January</li>\n<li>D: December</li>\n",
      "options": [
        ["A", "July"],
        ["B", "September"],
        ["C", "January"],
        ["D", "December"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-6\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-6\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: C</h4>\n<p><code>Object.entries</code> returns an array consisting of both key and value from an object while <code>Object.values</code> retuns an array of the values of object and <code>Object.keys</code> gives us an array of keys of the object. As such, <code>Object.entries(object)</code> in the code snippet above gives us a nested array with just one element in which the values are put in another nested array like that <code>[[\"month\", [\"July\", \"September\", \"January\", \"December\"]]]</code>.</p>\n<p>For that reason, <code>Object.entries(this.object)[0][1].sort()</code> will actually sort the value array and return a new order as \"December\" -&gt; \"January\" -&gt; \"July\" -&gt; \"September\". Hence, when we get the element with the index given by <code>[Object.values(this.object).length]</code> we get <code>January</code> because <code>[Object.values(this.object).length]</code> give us 1 (the length of the array given by Object.values);</p>\n<p></p>\n",
      "answer": "C",
      "description": [
        "<code>Object.entries</code> returns an array consisting of both key and value from an object while <code>Object.values</code> retuns an array of the values of object and <code>Object.keys</code> gives us an array of keys of the object. As such, <code>Object.entries(object)</code> in the code snippet above gives us a nested array with just one element in which the values are put in another nested array like that <code>[[\"month\", [\"July\", \"September\", \"January\", \"December\"]]]</code>.",
        "For that reason, <code>Object.entries(this.object)[0][1].sort()</code> will actually sort the value array and return a new order as \"December\" -&gt; \"January\" -&gt; \"July\" -&gt; \"September\". Hence, when we get the element with the index given by <code>[Object.values(this.object).length]</code> we get <code>January</code> because <code>[Object.values(this.object).length]</code> give us 1 (the length of the array given by Object.values);"
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "27. What's the output?",
      "innerHTML": "<a id=\"user-content-27-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#27-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>27. What's the output?",
      "id": "user-content-27-whats-the-output",
      "index": "27",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const flag = [] !== !!!!![];\n\nlet f = () => {};\n\nconsole.log((typeof f()).length + flag.toString().length);",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">flag</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span> !== !!!!!<span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-en\">f</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-en\">f</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">flag</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: NaN\nB: 12\nC: 13\nD: 14",
      "innerHTML": "\n<li>A: NaN</li>\n<li>B: 12</li>\n<li>C: 13</li>\n<li>D: 14</li>\n",
      "options": [
        ["A", "NaN"],
        ["B", "12"],
        ["C", "13"],
        ["D", "14"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-7\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-7\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: C</h4>\n<p>Comparing two arrays or two objects in JavaScript always return <code>false</code> because both are passed by reference, unlike primitive types such as string, number or boolean. That is why comparing [] and [] using either == or === returns <code>false</code>. The weird part is the <code>!==!!!!!</code> which is equivalent to <code>!==</code>, nothing special. So the <code>flag</code> is <code>true</code>.</p>\n<p>In the expression function <code>f()</code>, we use arrow function here but and <code>{}</code> is a part of the function rather than an object. In case you want to return an object, you have to write as <code>let f = () =&gt; ({})</code> or simply using normal way to define function. With the keyword <code>return</code>, we can easily catch the content of the function when using normal way to define function.</p>\n<p>Thus, the <code>typeof f()</code> returns <code>undefined</code> rathern <code>object</code>. We then get the length 9 and the flag (true) becomes 'true' (a string, by using toString() function), which returns 3 with the property <code>length</code>. We finally get 13.</p>\n<p></p>\n",
      "answer": "C",
      "description": [
        "Comparing two arrays or two objects in JavaScript always return <code>false</code> because both are passed by reference, unlike primitive types such as string, number or boolean. That is why comparing [] and [] using either == or === returns <code>false</code>. The weird part is the <code>!==!!!!!</code> which is equivalent to <code>!==</code>, nothing special. So the <code>flag</code> is <code>true</code>.",
        "In the expression function <code>f()</code>, we use arrow function here but and <code>{}</code> is a part of the function rather than an object. In case you want to return an object, you have to write as <code>let f = () =&gt; ({})</code> or simply using normal way to define function. With the keyword <code>return</code>, we can easily catch the content of the function when using normal way to define function.",
        "Thus, the <code>typeof f()</code> returns <code>undefined</code> rathern <code>object</code>. We then get the length 9 and the flag (true) becomes 'true' (a string, by using toString() function), which returns 3 with the property <code>length</code>. We finally get 13."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "28. What's the output?",
      "innerHTML": "<a id=\"user-content-28-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#28-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>28. What's the output?",
      "id": "user-content-28-whats-the-output",
      "index": "28",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "(function (a, b, c) {\n  arguments[2] = (typeof arguments).length;\n  c > 10 ? console.log(c) : console.log(++c);\n})(1, 2, 3);",
      "innerHTML": "<pre><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">b</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">c</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-s1\">c</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">10</span> ? <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">c</span><span class=\"pl-kos\">)</span> : <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">++</span><span class=\"pl-s1\">c</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 4\nB: 5\nC: 6\nD: 7",
      "innerHTML": "\n<li>A: 4</li>\n<li>B: 5</li>\n<li>C: 6</li>\n<li>D: 7</li>\n",
      "options": [
        ["A", "4"],
        ["B", "5"],
        ["C", "6"],
        ["D", "7"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-10\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-10\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>We have a self-invoking function with three parameters declared. Note that <code>arguments</code> inside a function returns an object consisting of the parameters of the function.</p>\n<p>The key part here is that when we assign a value to that array (it is array-like, as mentioned above) (or any element), the function will use that value rather than the value from the parameter we pass to it when calling the function. Hence, <code>c</code> will be <code>(typeof arguments).length;</code> (6) rather than 3.</p>\n<p>As <code>c</code> has a new value of 6, it is definitely less than 10, so we get the final result <code>console.log(++c)</code>, which returns 7.</p>\n<p>Note that <code>arguments</code> is not available on arrow functions. See more detailed here <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments</a></p>\n<p>From ES6 onwards, it is recommended to use ...restParameter given that it is a true array. It means you can manipulate the parameter with native JavaScript functions such as map, reduce or filter.</p>\n<p>For PHP developer, we have <code>func_get_args()</code> in PHP that does the same thing, but it will not override the value passed. Check it by yourself at <a href=\"https://3v4l.org/dMfhW\" rel=\"nofollow\">https://3v4l.org/dMfhW</a></p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "We have a self-invoking function with three parameters declared. Note that <code>arguments</code> inside a function returns an object consisting of the parameters of the function.",
        "The key part here is that when we assign a value to that array (it is array-like, as mentioned above) (or any element), the function will use that value rather than the value from the parameter we pass to it when calling the function. Hence, <code>c</code> will be <code>(typeof arguments).length;</code> (6) rather than 3.",
        "As <code>c</code> has a new value of 6, it is definitely less than 10, so we get the final result <code>console.log(++c)</code>, which returns 7.",
        "Note that <code>arguments</code> is not available on arrow functions. See more detailed here <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments</a>",
        "From ES6 onwards, it is recommended to use ...restParameter given that it is a true array. It means you can manipulate the parameter with native JavaScript functions such as map, reduce or filter.",
        "For PHP developer, we have <code>func_get_args()</code> in PHP that does the same thing, but it will not override the value passed. Check it by yourself at <a href=\"https://3v4l.org/dMfhW\" rel=\"nofollow\">https://3v4l.org/dMfhW</a>"
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "29. What's the output?",
      "innerHTML": "<a id=\"user-content-29-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#29-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>29. What's the output?",
      "id": "user-content-29-whats-the-output",
      "index": "29",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "class Calculator {\n  constructor(a, b) {\n    this.a = a;\n    this.b = b;\n  }\n  static getFlag() {\n    return new Array(this.a).length == new Array(this.b).toString().length;\n  }\n\n  getValue() {\n    return Calculator.getFlag() ? typeof this.a : typeof new Number(this.b);\n  }\n}\n\nconst me = new Calculator(5, 5);\n\nconsole.log(me.getValue());",
      "innerHTML": "<pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">Calculator</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">b</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">b</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">b</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">static</span> <span class=\"pl-en\">getFlag</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Array</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">a</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">==</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Array</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">b</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">getValue</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-v\">Calculator</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getFlag</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> ? <span class=\"pl-k\">typeof</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">a</span> : <span class=\"pl-k\">typeof</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Number</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">b</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">me</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Calculator</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">me</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getValue</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: NaN\nB: \"string\"\nC: \"object\"\nD: \"number\"",
      "innerHTML": "\n<li>A: NaN</li>\n<li>B: \"string\"</li>\n<li>C: \"object\"</li>\n<li>D: \"number\"</li>\n",
      "options": [
        ["A", "NaN"],
        ["B", "\"string\""],
        ["C", "\"object\""],
        ["D", "\"number\""]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-8\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-8\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: C</h4>\n<p>We have a class named Calculator. When declaring a new instance of the object, we pass two parameters <code>a</code> and <code>b</code>. These two parameters have the same value but <code>new Array(this.a).length</code> is totally different from <code>new Array(this.b).toString().length</code> because the latter returns a string <code>\",,,,\"</code> meaning the length 4 while the former returns the length of an array and we therefore get 5.</p>\n<p>For that reason <code>getFlag()</code> returns <code>false</code>. In <code>getValue()</code> we get <code>typeof new Number(this.b);</code> which returns <code>object</code>. That is a bit different from <code>typeof b</code>, which returns <code>number</code>.</p>\n<p></p>\n",
      "answer": "C",
      "description": [
        "We have a class named Calculator. When declaring a new instance of the object, we pass two parameters <code>a</code> and <code>b</code>. These two parameters have the same value but <code>new Array(this.a).length</code> is totally different from <code>new Array(this.b).toString().length</code> because the latter returns a string <code>\",,,,\"</code> meaning the length 4 while the former returns the length of an array and we therefore get 5.",
        "For that reason <code>getFlag()</code> returns <code>false</code>. In <code>getValue()</code> we get <code>typeof new Number(this.b);</code> which returns <code>object</code>. That is a bit different from <code>typeof b</code>, which returns <code>number</code>."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "30. What's the output?",
      "innerHTML": "<a id=\"user-content-30-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#30-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>30. What's the output?",
      "id": "user-content-30-whats-the-output",
      "index": "30",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "var name = \"Auckland\";\n\nconst nz = {\n  name: \"Kiwi\",\n\n  callMe: function () {\n    return this.name;\n  },\n};\n\nlet me = nz.callMe;\n\nlet she = nz.callMe.bind(nz);\n\nlet result = me() === nz.callMe() ? she() : `${me()} ${she()}`;\n\nconsole.log(result);",
      "innerHTML": "<pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"Auckland\"</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">nz</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"Kiwi\"</span><span class=\"pl-kos\">,</span>\n\n  <span class=\"pl-en\">callMe</span>: <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">me</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">nz</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">callMe</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">she</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">nz</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">callMe</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">nz</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">me</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">nz</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">callMe</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> ? <span class=\"pl-s1\">she</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> : <span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">me</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span></span> <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">she</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: undefined\nB: \"Auckland\"\nC: \"Kiwi\"\nD: \"Auckland Kiwi\"",
      "innerHTML": "\n<li>A: undefined</li>\n<li>B: \"Auckland\"</li>\n<li>C: \"Kiwi\"</li>\n<li>D: \"Auckland Kiwi\"</li>\n",
      "options": [
        ["A", "undefined"],
        ["B", "\"Auckland\""],
        ["C", "\"Kiwi\""],
        ["D", "\"Auckland Kiwi\""]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-11\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-11\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>The key point in this question involves the keyword <code>this</code> in JavaScript. We have a simple object that contains one method and one string property <code>name</code>.</p>\n<p>First, it is important to write down is that <code>let me = nz.callMe;</code> and then call <code>me()</code> is totally different from directly calling <code>nz.callMe()</code>. If we assign a variable to a method delared inside an object, <code>this</code> in that method will behave differently (when we call the variable as a method and when dirrectly call that method). In particular, in the first case, <code>this</code> is the <code>window</code> object while in the second one, <code>this</code> inside the function still points to property <code>name</code> in the object <code>nz</code>. It means <code>me()</code> returns \"Auckland\" while <code>nz.callMe</code> returns \"Kiwi\".</p>\n<p>Then <code>result</code> will return <code>false</code> and we get the final output value <code>${me()} ${she()}</code>. Why <code>she()</code> is different from <code>me()</code>? You might easily guess that <code>she</code> still <code>bind</code> to the object <code>nz</code> rather than <code>window</code> object as in <code>me()</code>.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "The key point in this question involves the keyword <code>this</code> in JavaScript. We have a simple object that contains one method and one string property <code>name</code>.",
        "First, it is important to write down is that <code>let me = nz.callMe;</code> and then call <code>me()</code> is totally different from directly calling <code>nz.callMe()</code>. If we assign a variable to a method delared inside an object, <code>this</code> in that method will behave differently (when we call the variable as a method and when dirrectly call that method). In particular, in the first case, <code>this</code> is the <code>window</code> object while in the second one, <code>this</code> inside the function still points to property <code>name</code> in the object <code>nz</code>. It means <code>me()</code> returns \"Auckland\" while <code>nz.callMe</code> returns \"Kiwi\".",
        "Then <code>result</code> will return <code>false</code> and we get the final output value <code>${me()} ${she()}</code>. Why <code>she()</code> is different from <code>me()</code>? You might easily guess that <code>she</code> still <code>bind</code> to the object <code>nz</code> rather than <code>window</code> object as in <code>me()</code>."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "31. What's the output?",
      "innerHTML": "<a id=\"user-content-31-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#31-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>31. What's the output?",
      "id": "user-content-31-whats-the-output",
      "index": "31",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const club = {\n  name: \"Juventus\",\n  player: [\"Ronaldo\"],\n  showMePlayer: function () {\n    this.player.map(function (thename) {\n      console.log(this.name.length);\n    }, this);\n  },\n  showMe: function () {\n    this.player.forEach(\n      function (thename) {\n        console.log(this.name.length);\n      }.bind(this)\n    );\n  },\n  show: function () {\n    const self = this;\n    this.player.map(function (thename) {\n      console.log(self.name.length);\n    });\n  },\n  Me: function () {\n    this.player.map(function (thename) {\n      console.log(this.name.length);\n    });\n  },\n};\n\nclub.showMePlayer();\nclub.showMe();\nclub.show();\nclub.Me();",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">club</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"Juventus\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">player</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">\"Ronaldo\"</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">showMePlayer</span>: <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">player</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">thename</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">showMe</span>: <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">player</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span>\n      <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">thename</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">show</span>: <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">self</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">player</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">thename</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">self</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">Me</span>: <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">player</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">thename</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">club</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">showMePlayer</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">club</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">showMe</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">club</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">show</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">club</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">Me</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 8 - 8 - 8 - 8\nB: \"Juventus\" - \"Juventus\" - \"Juventus\" - \"Juventus\"\nC: \"Ronaldo\" - \"Ronaldo\" - \"Ronaldo\" - \"Ronaldo\"\nD: 8 - 8 - 8 - 0",
      "innerHTML": "\n<li>A: 8 - 8 - 8 - 8</li>\n<li>B: \"Juventus\" - \"Juventus\" - \"Juventus\" - \"Juventus\"</li>\n<li>C: \"Ronaldo\" - \"Ronaldo\" - \"Ronaldo\" - \"Ronaldo\"</li>\n<li>D: 8 - 8 - 8 - 0</li>\n",
      "options": [
        ["A", "8 - 8 - 8 - 8"],
        [
          "B",
          "\"Juventus\" - \"Juventus\" - \"Juventus\" - \"Juventus\""
        ],
        [
          "C",
          "\"Ronaldo\" - \"Ronaldo\" - \"Ronaldo\" - \"Ronaldo\""
        ],
        ["D", "8 - 8 - 8 - 0"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-12\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-12\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>The code snippet above is not a big challenge for you I guess. It simply gives you an example of <code>this</code> in different contexts when we declare an anonymous function inside a method of an object. The three first methods are common ways to handle <code>this</code> using <code>this</code> as second parameter in <code>map()</code>, by using <code>bind(this)</code> in <code>forEach</code> (or map()) or by <code>that = this</code>technique (we did use <code>seft</code> rathern <code>that</code>).</p>\n<p>The last method <code>Me()</code> will cause unexpected result because <code>this.name</code> does not bind to the object <code>club</code>. Note that you might get another result when testing the code on jsbin.com. On Chrome and Firefox, we get 0.</p>\n<p>For further information, kindly have a look at <a href=\"http://speakingjs.com/es5/ch17.html#_pitfall_losing_this_when_extracting_a_method\" rel=\"nofollow\">http://speakingjs.com/es5/ch17.html#_pitfall_losing_this_when_extracting_a_method</a></p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "The code snippet above is not a big challenge for you I guess. It simply gives you an example of <code>this</code> in different contexts when we declare an anonymous function inside a method of an object. The three first methods are common ways to handle <code>this</code> using <code>this</code> as second parameter in <code>map()</code>, by using <code>bind(this)</code> in <code>forEach</code> (or map()) or by <code>that = this</code>technique (we did use <code>seft</code> rathern <code>that</code>).",
        "The last method <code>Me()</code> will cause unexpected result because <code>this.name</code> does not bind to the object <code>club</code>. Note that you might get another result when testing the code on jsbin.com. On Chrome and Firefox, we get 0.",
        "For further information, kindly have a look at <a href=\"http://speakingjs.com/es5/ch17.html#_pitfall_losing_this_when_extracting_a_method\" rel=\"nofollow\">http://speakingjs.com/es5/ch17.html#_pitfall_losing_this_when_extracting_a_method</a>"
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "32. What's the output?",
      "innerHTML": "<a id=\"user-content-32-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#32-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>32. What's the output?",
      "id": "user-content-32-whats-the-output",
      "index": "32",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "((...a) => {\n  const b = [\"javascript\", \"new zealand\"];\n\n  const c = [...a, typeof a, ...b, \"kiwi\"];\n\n  console.log(c.length + c[0].length);\n})(new Array(10));",
      "innerHTML": "<pre><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">a</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">b</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-s\">\"javascript\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"new zealand\"</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">c</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>...<span class=\"pl-s1\">a</span><span class=\"pl-kos\">,</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">b</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"kiwi\"</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">c</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">c</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">Array</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">10</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 5\nB: 10\nC: 15\nD: 20",
      "innerHTML": "\n<li>A: 5</li>\n<li>B: 10</li>\n<li>C: 15</li>\n<li>D: 20</li>\n",
      "options": [
        ["A", "5"],
        ["B", "10"],
        ["C", "15"],
        ["D", "20"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-9\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-9\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: C</h4>\n<p><code>...</code> can be used in two ways in JavaScript (and PHP) as either <code>spread operator</code> or <code>rest parameter</code>. You might have to check the following article about the two. They are the same as three dots, but the way they are employed vary considerably between the two. <a href=\"https://javascript.info/rest-parameters-spread-operator\" rel=\"nofollow\">https://javascript.info/rest-parameters-spread-operator</a></p>\n<p>We see both <code>spread operator</code> and <code>rest parameter</code> in the code snippet above. First the parameter <code>(...a)</code> in the self-invoking function is of course a <code>rest parameter</code> while the constant <code>c</code> we see the <code>spread operator</code>. In the former case, it simply means that you can pass to the function as many parameter as you want. Note that the <code>typeof a</code> in this case is <code>object</code> even though it is a native array in JavaScript. (I means native array because you might think about array-like if we use arguments. Please have a look at the question 28 or this link <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments</a>).</p>\n<p><code>Spread operator</code> as in the constant <code>c</code> allows us to combine array. So <code>...a</code> in the code above is <code>rest parameter</code> when it is used as function parameter but in this case it is the syntax of <code>spread operator</code>.</p>\n<p>Finally, we get <code>c</code> with 5 elements (<code>...a</code> is a nested array, so the <code>length</code> is 1) but the first element has 10 child elements (when we pass to the function <code>new Array(10)</code>). The length of both then returns 15.</p>\n<p></p>\n",
      "answer": "C",
      "description": [
        "<code>...</code> can be used in two ways in JavaScript (and PHP) as either <code>spread operator</code> or <code>rest parameter</code>. You might have to check the following article about the two. They are the same as three dots, but the way they are employed vary considerably between the two. <a href=\"https://javascript.info/rest-parameters-spread-operator\" rel=\"nofollow\">https://javascript.info/rest-parameters-spread-operator</a>",
        "We see both <code>spread operator</code> and <code>rest parameter</code> in the code snippet above. First the parameter <code>(...a)</code> in the self-invoking function is of course a <code>rest parameter</code> while the constant <code>c</code> we see the <code>spread operator</code>. In the former case, it simply means that you can pass to the function as many parameter as you want. Note that the <code>typeof a</code> in this case is <code>object</code> even though it is a native array in JavaScript. (I means native array because you might think about array-like if we use arguments. Please have a look at the question 28 or this link <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments</a>).",
        "<code>Spread operator</code> as in the constant <code>c</code> allows us to combine array. So <code>...a</code> in the code above is <code>rest parameter</code> when it is used as function parameter but in this case it is the syntax of <code>spread operator</code>.",
        "Finally, we get <code>c</code> with 5 elements (<code>...a</code> is a nested array, so the <code>length</code> is 1) but the first element has 10 child elements (when we pass to the function <code>new Array(10)</code>). The length of both then returns 15."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "33. What's the output?",
      "innerHTML": "<a id=\"user-content-33-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#33-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>33. What's the output?",
      "id": "user-content-33-whats-the-output",
      "index": "33",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "function Kiora(name, ...career) {\n  this.name = name;\n\n  return Array.isArray(career) === true && typeof career === \"object\" ? {} : \"\";\n}\n\nvar student = new Kiora(\"Vuong\");\n\nconsole.log(student.name);",
      "innerHTML": "<pre><span class=\"pl-k\">function</span> <span class=\"pl-v\">Kiora</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">career</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">career</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">true</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">career</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">\"object\"</span> ? <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span> : <span class=\"pl-s\">\"\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">student</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Kiora</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Vuong\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">student</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: \"Vuong\"\nB: undefined\nC: ErrorReference\nD: false",
      "innerHTML": "\n<li>A: \"Vuong\"</li>\n<li>B: undefined</li>\n<li>C: ErrorReference</li>\n<li>D: false</li>\n",
      "options": [
        ["A", "\"Vuong\""],
        ["B", "undefined"],
        ["C", "ErrorReference"],
        ["D", "false"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-3\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-3\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: B</h4>\n<p>We have a function constructor <code>Kiora</code> (written with a capital letter, but that is optional) that can be used to create object, as the <code>student</code> object in the code above. In the function, we have two parameters with the second one is actually a <code>rest parameter</code>. The typeof operator is <code>object</code> but if we check with <code>Array.isArray(array)</code> it also returns true.</p>\n<p>For that reason, <code>Array.isArray(career) === true &amp;&amp; typeof career === \"object\"</code> returns true. Hence the <code>return</code> operator finally returns an object <code>{}</code>.</p>\n<p>You might be surprised when <code>console.log(student.name);</code> outputs <code>undefined</code> given that the constructor function <code>Kiora</code> returns an object. Otherwise, we might simply get the value <code>name</code>.</p>\n<p></p>\n",
      "answer": "B",
      "description": [
        "We have a function constructor <code>Kiora</code> (written with a capital letter, but that is optional) that can be used to create object, as the <code>student</code> object in the code above. In the function, we have two parameters with the second one is actually a <code>rest parameter</code>. The typeof operator is <code>object</code> but if we check with <code>Array.isArray(array)</code> it also returns true.",
        "For that reason, <code>Array.isArray(career) === true &amp;&amp; typeof career === \"object\"</code> returns true. Hence the <code>return</code> operator finally returns an object <code>{}</code>.",
        "You might be surprised when <code>console.log(student.name);</code> outputs <code>undefined</code> given that the constructor function <code>Kiora</code> returns an object. Otherwise, we might simply get the value <code>name</code>."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "34. What's the output?",
      "innerHTML": "<a id=\"user-content-34-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#34-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>34. What's the output?",
      "id": "user-content-34-whats-the-output",
      "index": "34",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "class Filter {\n  constructor(element) {\n    this.element = element;\n  }\n  filter() {\n    return this.type() === \"object\" ? this.element[0].name : \"hello\";\n  }\n\n  type() {\n    return typeof this.element;\n  }\n}\n\nlet countries = [\n  { name: \"New Zealand\", isdeveloped: true },\n  { name: \"Vietnam\", isdeveloped: false },\n];\n\nlet x = new Filter(countries);\n\nconst filter = countries.filter((item) => {\n  return !item.isdeveloped;\n});\n\nconsole.log(x.filter().length + filter[0].name.length);",
      "innerHTML": "<pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">Filter</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">element</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">element</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">element</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-en\">filter</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">type</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">\"object\"</span> ? <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">element</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> : <span class=\"pl-s\">\"hello\"</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">type</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">element</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">countries</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>\n  <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"New Zealand\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">isdeveloped</span>: <span class=\"pl-c1\">true</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"Vietnam\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">isdeveloped</span>: <span class=\"pl-c1\">false</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Filter</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">countries</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">filter</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">countries</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">filter</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> !<span class=\"pl-s1\">item</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">isdeveloped</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">filter</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">filter</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 15\nB: 16\nC: 17\nD: 18",
      "innerHTML": "\n<li>A: 15</li>\n<li>B: 16</li>\n<li>C: 17</li>\n<li>D: 18</li>\n",
      "options": [
        ["A", "15"],
        ["B", "16"],
        ["C", "17"],
        ["D", "18"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-13\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-13\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>Apologize that the code snippet is a bit longer than usual. But actually it is not really challenging as you might think. You can easily get the correct result after spending a little of time to debug.</p>\n<p>First we declare a class that has two methods. The first method <code>filter()</code> will returns the first element of the array (of the propterty <code>element</code>) or simply returns <code>hello</code> depending on the <code>type()</code> method. We know that <code>typeof of array</code> will return <code>object</code> so the <code>filter()</code> method return <code>this.element[0].name</code>.</p>\n<p>Try to make you feel confused, we then call the built-in <code>filter()</code> method. This native method returns a new array depending on the condition we pass to the call-back function. Note that <code>!item.isdeveloped</code> means <code>false</code>. It means we get <code>Vietnam</code>.</p>\n<p>Finally we get <code>New Zealand</code>.length and <code>Vietnam</code>.length, which in total returns 18.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "Apologize that the code snippet is a bit longer than usual. But actually it is not really challenging as you might think. You can easily get the correct result after spending a little of time to debug.",
        "First we declare a class that has two methods. The first method <code>filter()</code> will returns the first element of the array (of the propterty <code>element</code>) or simply returns <code>hello</code> depending on the <code>type()</code> method. We know that <code>typeof of array</code> will return <code>object</code> so the <code>filter()</code> method return <code>this.element[0].name</code>.",
        "Try to make you feel confused, we then call the built-in <code>filter()</code> method. This native method returns a new array depending on the condition we pass to the call-back function. Note that <code>!item.isdeveloped</code> means <code>false</code>. It means we get <code>Vietnam</code>.",
        "Finally we get <code>New Zealand</code>.length and <code>Vietnam</code>.length, which in total returns 18."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "35. What's the output?",
      "innerHTML": "<a id=\"user-content-35-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#35-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>35. What's the output?",
      "id": "user-content-35-whats-the-output",
      "index": "35",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "async function abc() {\n  console.log(8);\n\n  await Promise.resolve(2).then(console.log);\n\n  console.log(3);\n}\n\nsetTimeout(() => {\n  console.log(1);\n}, 0);\n\nabc();\n\nqueueMicrotask(() => {\n  console.log(0);\n});\n\nPromise.resolve(4).then(console.log);\n\nconsole.log(6);",
      "innerHTML": "<pre><span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">abc</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">8</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">await</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">abc</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">queueMicrotask</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-v\">Promise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">4</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">log</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">6</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 6 - 8 - 3 - 0 - 4 - 2 - 1\nB: 8 - 2 - 3 - 0 - 4 - 6 - 1\nC: 6 - 8 - 2 - 0 - 4 - 3 - 1\nD: 8 - 6 - 2 - 0 - 4 - 3 - 1",
      "innerHTML": "\n<li>A: 6 - 8 - 3 - 0 - 4 - 2 - 1</li>\n<li>B: 8 - 2 - 3 - 0 - 4 - 6 - 1</li>\n<li>C: 6 - 8 - 2 - 0 - 4 - 3 - 1</li>\n<li>D: 8 - 6 - 2 - 0 - 4 - 3 - 1</li>\n",
      "options": [
        ["A", "6 - 8 - 3 - 0 - 4 - 2 - 1"],
        ["B", "8 - 2 - 3 - 0 - 4 - 6 - 1"],
        ["C", "6 - 8 - 2 - 0 - 4 - 3 - 1"],
        ["D", "8 - 6 - 2 - 0 - 4 - 3 - 1"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-14\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-14\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>D is correct anwser. The order of the asynchronous code's output depends on the MicroTask or MacroTask. MicroTask has a higher priority. Note that the synchronous code always be executed before asynchronous code. So in essense, we have the order as follows:</p>\n<pre><code>  1) synchronous code\n  2) microtask code (promise, queueMicrotask)\n  3) macrotask code (setTimeout, setInterval)\n</code></pre>\n<p>Be awared that in Nodejs environment, we also have <code>process.nextTick(callback)</code> which has the highest priority but we dont have it in this code.</p>\n<p>So, first callback in the <code>setTimeout()</code> will be executed last given that this is a MacroTask. That is why we got 1 last.</p>\n<p>Second, the function <code>abc()</code> is called next. Then we have 8 printed out in the console first. As the next line of code inside that function is an asynchrnous code with the keyword \"await\", we then <code>console.log(6)</code> as <code>Promise.resolve(4).then(console.log)</code> is an asynchrnous code. That is why we got 6.</p>\n<p>Now is the time for <code>Promise.resolve(2)</code>, so we get 2. At this point, you might have some sort of confusion. What will happend if we do not pass the keyword \"await\" before <code>Promise.resolve(2)</code> ?</p>\n<p>As we have <code>await</code>, the code will be blocked here. Then what? We get 0 and 4 not 3. <code>Promise</code> and <code>queueMicrotask</code> are both microtask and they are already to run before <code>console.log(3)</code>. The reason is that microtask queue need to be emptied before any other codes can be called in the callstack.</p>\n<p>In the next step, we get 3 and the last one is 1.</p>\n<p>What would happend if we do not have the <code>await</code> keyword? Then the order of the output will be 8 - 3 - 6 - 2 - 0 - 4 -1.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "D is correct anwser. The order of the asynchronous code's output depends on the MicroTask or MacroTask. MicroTask has a higher priority. Note that the synchronous code always be executed before asynchronous code. So in essense, we have the order as follows:",
        "Be awared that in Nodejs environment, we also have <code>process.nextTick(callback)</code> which has the highest priority but we dont have it in this code.",
        "So, first callback in the <code>setTimeout()</code> will be executed last given that this is a MacroTask. That is why we got 1 last.",
        "Second, the function <code>abc()</code> is called next. Then we have 8 printed out in the console first. As the next line of code inside that function is an asynchrnous code with the keyword \"await\", we then <code>console.log(6)</code> as <code>Promise.resolve(4).then(console.log)</code> is an asynchrnous code. That is why we got 6.",
        "Now is the time for <code>Promise.resolve(2)</code>, so we get 2. At this point, you might have some sort of confusion. What will happend if we do not pass the keyword \"await\" before <code>Promise.resolve(2)</code> ?",
        "As we have <code>await</code>, the code will be blocked here. Then what? We get 0 and 4 not 3. <code>Promise</code> and <code>queueMicrotask</code> are both microtask and they are already to run before <code>console.log(3)</code>. The reason is that microtask queue need to be emptied before any other codes can be called in the callstack.",
        "In the next step, we get 3 and the last one is 1.",
        "What would happend if we do not have the <code>await</code> keyword? Then the order of the output will be 8 - 3 - 6 - 2 - 0 - 4 -1."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "36. What's the output?",
      "innerHTML": "<a id=\"user-content-36-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#36-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>36. What's the output?",
      "id": "user-content-36-whats-the-output",
      "index": "36",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "function myAccount(money) {\n  let myMoney = money;\n\n  return {\n    status: function () {\n      return `You have $ ${myMoney} in your account`;\n    },\n    dePoSit: function (amount) {\n      myMoney = myMoney + amount;\n    },\n    withDraw: function (amount) {\n      if (amount > myMoney) {\n        return `You cannot withdraw money now`;\n      }\n      myMoney = myMoney - amount;\n    },\n  };\n}\n\nconst vuong = myAccount(1000);\n\nvuong.withDraw(500);\n\nvuong.withDraw(200);\n\nvuong.dePoSit(100);\n\nvuong.withDraw(50);\n\nconsole.log(vuong.status());",
      "innerHTML": "<pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">myAccount</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">money</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">myMoney</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">money</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">status</span>: <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s\">`You have $ <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">myMoney</span><span class=\"pl-kos\">}</span></span> in your account`</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">dePoSit</span>: <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">amount</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">myMoney</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">myMoney</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">amount</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">withDraw</span>: <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">amount</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">amount</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-s1\">myMoney</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-s\">`You cannot withdraw money now`</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n      <span class=\"pl-s1\">myMoney</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">myMoney</span> <span class=\"pl-c1\">-</span> <span class=\"pl-s1\">amount</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">vuong</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">myAccount</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">vuong</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">withDraw</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">500</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">vuong</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">withDraw</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">200</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">vuong</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">dePoSit</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">100</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">vuong</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">withDraw</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">50</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">vuong</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">status</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: \"You have $ 950 in your account\"\nB: \"You have $ 1000 in your account\"\nC: \"You have $ 550 in your account\"\nD: \"You have $ 350 in your account\"",
      "innerHTML": "\n<li>A: \"You have $ 950 in your account\"</li>\n<li>B: \"You have $ 1000 in your account\"</li>\n<li>C: \"You have $ 550 in your account\"</li>\n<li>D: \"You have $ 350 in your account\"</li>\n",
      "options": [
        ["A", "\"You have $ 950 in your account\""],
        ["B", "\"You have $ 1000 in your account\""],
        ["C", "\"You have $ 550 in your account\""],
        ["D", "\"You have $ 350 in your account\""]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-15\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-15\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>As the \"state\" of the data is preserved each time we call <code>dePoSit()</code> or <code>withDraw()</code>, hence we get $350 after all.</p>\n<p>Noted that that is a kind of \"factory\" function with \"preload\" data. You might think about another object when pass to <code>myAccount(somedata);</code> some other data. That is a really helpful way to create multiple objects from a factory function.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "As the \"state\" of the data is preserved each time we call <code>dePoSit()</code> or <code>withDraw()</code>, hence we get $350 after all.",
        "Noted that that is a kind of \"factory\" function with \"preload\" data. You might think about another object when pass to <code>myAccount(somedata);</code> some other data. That is a really helpful way to create multiple objects from a factory function."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "37. What's the output?",
      "innerHTML": "<a id=\"user-content-37-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#37-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>37. What's the output?",
      "id": "user-content-37-whats-the-output",
      "index": "37",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const hoccoban = {\n  x: \"youtube.com/hoccoban\".length,\n  getMe() {\n    const inner = function () {\n      console.log(++this.x);\n    };\n    inner.bind(this)();\n  },\n};\n\nhoccoban.getMe();",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">hoccoban</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">x</span>: <span class=\"pl-s\">\"youtube.com/hoccoban\"</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">getMe</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-en\">inner</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">++</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">x</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-en\">inner</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">hoccoban</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getMe</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 20\nB: 21\nC: 22\nD: 23",
      "innerHTML": "\n<li>A: 20</li>\n<li>B: 21</li>\n<li>C: 22</li>\n<li>D: 23</li>\n",
      "options": [
        ["A", "20"],
        ["B", "21"],
        ["C", "22"],
        ["D", "23"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-4\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-4\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: B</h4>\n<p>We get 21. First \"youtube.com/hoccoban\" returns 20 as we are using the property length of the string. Then it is being added one more value in <code>++this.x</code>. The question here seems trivial but it is actually not. There is a crucial note we should keep in mind is that <code>console.log(++this.x)</code> will not work as <code>x</code> is undefined when it is called outside of the object.</p>\n<p>We can solve the problem with <code>this</code> in this case by using arrow function in the inner so that is can become something like <code>const inner = () =&gt; {}</code> as the arrow function does not actually have <code>this</code>. It will automatically look around and call the available object when the function is executed.</p>\n<p>The second solution is that we can somehow \"bypass\" the tricky <code>this</code> by using that/this solution. We just need to declare a new variable <code>const that = this</code> inside getMe() and before declaring inner function. That is a quite common practice.</p>\n<p>The third solution is to take advantage of call(), bind() and apply() which are native methods of function (yes, function is also an object in JavaScript). In this case, we implement <code>bind(this)</code> to \"bind\" the function and the object so that <code>this</code> can actually point to the object when the function is executed. Note that bind() cannot be instantlly executed so that we need to add () after we bridge the function and the object. If we replace bind() with call(), then we do not need to pass () as in the above example. So <code>inner.bind(this)();</code> will become <code>inner.call(this);</code>. They are technically equal. In practice, we tend to create a new variable to get the result from the binding of the function and the object.</p>\n<p></p>\n",
      "answer": "B",
      "description": [
        "We get 21. First \"youtube.com/hoccoban\" returns 20 as we are using the property length of the string. Then it is being added one more value in <code>++this.x</code>. The question here seems trivial but it is actually not. There is a crucial note we should keep in mind is that <code>console.log(++this.x)</code> will not work as <code>x</code> is undefined when it is called outside of the object.",
        "We can solve the problem with <code>this</code> in this case by using arrow function in the inner so that is can become something like <code>const inner = () =&gt; {}</code> as the arrow function does not actually have <code>this</code>. It will automatically look around and call the available object when the function is executed.",
        "The second solution is that we can somehow \"bypass\" the tricky <code>this</code> by using that/this solution. We just need to declare a new variable <code>const that = this</code> inside getMe() and before declaring inner function. That is a quite common practice.",
        "The third solution is to take advantage of call(), bind() and apply() which are native methods of function (yes, function is also an object in JavaScript). In this case, we implement <code>bind(this)</code> to \"bind\" the function and the object so that <code>this</code> can actually point to the object when the function is executed. Note that bind() cannot be instantlly executed so that we need to add () after we bridge the function and the object. If we replace bind() with call(), then we do not need to pass () as in the above example. So <code>inner.bind(this)();</code> will become <code>inner.call(this);</code>. They are technically equal. In practice, we tend to create a new variable to get the result from the binding of the function and the object."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "38. What's the output?",
      "innerHTML": "<a id=\"user-content-38-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#38-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>38. What's the output?",
      "id": "user-content-38-whats-the-output",
      "index": "38",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "function* hocCoBan() {\n  yield \"js.edu.vn\";\n  yield \"youtube.com/hoccoban\";\n  yield \"Vuong Nguyen\";\n}\n\nlet data = hocCoBan();\n\nconsole.log((typeof data).length + data.next().value.length);",
      "innerHTML": "<pre><span class=\"pl-k\">function</span>* <span class=\"pl-s1\">hocCoBan</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">yield</span> <span class=\"pl-s\">\"js.edu.vn\"</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">yield</span> <span class=\"pl-s\">\"youtube.com/hoccoban\"</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">yield</span> <span class=\"pl-s\">\"Vuong Nguyen\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">data</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">hocCoBan</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: NaN\nB: 10\nC: Error\nD: 15",
      "innerHTML": "\n<li>A: NaN</li>\n<li>B: 10</li>\n<li>C: Error</li>\n<li>D: 15</li>\n",
      "options": [
        ["A", "NaN"],
        ["B", "10"],
        ["C", "Error"],
        ["D", "15"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-16\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-16\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>First, take a closer look at the function. It has a asterisk (*) next to the keyword \"function\". We do not have <code>return</code> keyword inside the function itself. What is going on here?</p>\n<p>It you have already known about generator, then this code snippet is not a big deal at all. We do not use generator very often, but this native JavaScript feature is the basis for async/await function, which is supported in ES7 that allows us to handle the flow of asynchronous code much easily.</p>\n<p>The operator <code>typeof data</code> will return <code>object</code> rather than <code>function</code>, which is the same case with <code>typeof hocCoBan()</code>. Of course, <code>typeof hocCoBan</code> still returns <code>function</code>. But it is actually a normal function. Basically, we get 6 in the operator <code>(typeof data).length</code>.</p>\n<p>Then <code>data.next()</code> calls the the built-in method <code>next()</code> which will output the value in the first <code>yield</code>, which is declared in the function. Then we get the length 9 with the string <code>js.edu.vn</code>.</p>\n<p>After all, we get 15. Not that understanding generator is quite important if you really want to understand <code>async/await</code> function.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "First, take a closer look at the function. It has a asterisk (*) next to the keyword \"function\". We do not have <code>return</code> keyword inside the function itself. What is going on here?",
        "It you have already known about generator, then this code snippet is not a big deal at all. We do not use generator very often, but this native JavaScript feature is the basis for async/await function, which is supported in ES7 that allows us to handle the flow of asynchronous code much easily.",
        "The operator <code>typeof data</code> will return <code>object</code> rather than <code>function</code>, which is the same case with <code>typeof hocCoBan()</code>. Of course, <code>typeof hocCoBan</code> still returns <code>function</code>. But it is actually a normal function. Basically, we get 6 in the operator <code>(typeof data).length</code>.",
        "Then <code>data.next()</code> calls the the built-in method <code>next()</code> which will output the value in the first <code>yield</code>, which is declared in the function. Then we get the length 9 with the string <code>js.edu.vn</code>.",
        "After all, we get 15. Not that understanding generator is quite important if you really want to understand <code>async/await</code> function."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "39. What's the output?",
      "innerHTML": "<a id=\"user-content-39-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#39-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>39. What's the output?",
      "id": "user-content-39-whats-the-output",
      "index": "39",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const a = [1, 2, \"chó\", 3, 1, \"chó\", \"mèo\", 3];\n\nconst b = [...new Set(a)];\n\nb.length = \"chó\".length;\n\nconsole.log(b);",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"chó\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"chó\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"mèo\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">b</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>...<span class=\"pl-k\">new</span> <span class=\"pl-v\">Set</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">b</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"chó\"</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">b</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 4\nB: [1, 2, \"chó\", 3, \"mèo\"]\nC: [1, 2, \"chó\", \"mèo\"]\nD: [1, 2, \"chó\"]",
      "innerHTML": "\n<li>A: 4</li>\n<li>B: [1, 2, \"chó\", 3, \"mèo\"]</li>\n<li>C: [1, 2, \"chó\", \"mèo\"]</li>\n<li>D: [1, 2, \"chó\"]</li>\n",
      "options": [
        ["A", "4"],
        ["B", "[1, 2, \"chó\", 3, \"mèo\"]"],
        ["C", "[1, 2, \"chó\", \"mèo\"]"],
        ["D", "[1, 2, \"chó\"]"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-17\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-17\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>When using ... in array, it is called spread operator in JavaScript which, technically, is similar to rest parameter (using in the context of function). It provides a more elegant way to concat (combine) or copy array. In the code above, b is a copy of a. However, as we pass a in to a <code>Set</code>, it will return the unique value only in a. It means, now we have `[1, 2, \"chó\", 3, \"mèo\"] in b.</p>\n<p>However, we then set the length for b as 3. Note that \"chó\".length returns 3 but in PHP, strlen(\"chó\") returns 4, just in case you are coming from PHP world.</p>\n<p>As we set the length for the array b, we also cut down the array itselt. That is the reason why we get [1, 2, \"chó\"] printing out in the console.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "When using ... in array, it is called spread operator in JavaScript which, technically, is similar to rest parameter (using in the context of function). It provides a more elegant way to concat (combine) or copy array. In the code above, b is a copy of a. However, as we pass a in to a <code>Set</code>, it will return the unique value only in a. It means, now we have `[1, 2, \"chó\", 3, \"mèo\"] in b.",
        "However, we then set the length for b as 3. Note that \"chó\".length returns 3 but in PHP, strlen(\"chó\") returns 4, just in case you are coming from PHP world.",
        "As we set the length for the array b, we also cut down the array itselt. That is the reason why we get [1, 2, \"chó\"] printing out in the console."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "40. What's the output?",
      "innerHTML": "<a id=\"user-content-40-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#40-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>40. What's the output?",
      "id": "user-content-40-whats-the-output",
      "index": "40",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const mot = function (m) {\n  return arguments[0];\n};\n\nconst hai = function (...m) {\n  return arguments[arguments[0]];\n};\n\nconst a = [mot(123), hai(1, 2, 3)];\n\nconsole.log(typeof a !== \"object\" ? a[0] : a[1]);",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-en\">mot</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">m</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">hai</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">m</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">[</span><span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-en\">mot</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">123</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">hai</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">a</span> !== <span class=\"pl-s\">\"object\"</span> ? <span class=\"pl-s1\">a</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span> : <span class=\"pl-s1\">a</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 1\nB: 2\nC: 3\nD: 123",
      "innerHTML": "\n<li>A: 1</li>\n<li>B: 2</li>\n<li>C: 3</li>\n<li>D: 123</li>\n",
      "options": [
        ["A", "1"],
        ["B", "2"],
        ["C", "3"],
        ["D", "123"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-5\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-5\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: B</h4>\n<p>First, it should be noted that <code>arguments</code> cannot be used in an arrow function, so in order to take advantage of this feature, we have to write the function in the casual form. <code>arguments</code> returns an array-like object that contains any parameter we pass into the function when executing it.</p>\n<p><code>...</code> is a <code>rest operator</code>. We use this feature in function and array. Noted that in the context of array, it is called <code>spread operator</code> and it behaves differently. When declaring a function with ..., we can pass as many parameters into the function itselt when executing it as we want.</p>\n<p>Note that in the function <code>hai</code>, we return <code>arguments[arguments[0]]</code> which means <code>hai(1, 2, 3)</code> will return 2 rathern than 1 because <code>arguments[0]</code> return 1 and then <code>arguments[1]</code> returns 2.</p>\n<p>The last thing we have to take note is that the typeof operator of an array will return <code>object</code>, here the trick seems more daunting. The final anwser is 2 as we got it in <code>a[1]</code>, or <code>hai(1, 2, 3)</code>.</p>\n<p></p>\n",
      "answer": "B",
      "description": [
        "First, it should be noted that <code>arguments</code> cannot be used in an arrow function, so in order to take advantage of this feature, we have to write the function in the casual form. <code>arguments</code> returns an array-like object that contains any parameter we pass into the function when executing it.",
        "<code>...</code> is a <code>rest operator</code>. We use this feature in function and array. Noted that in the context of array, it is called <code>spread operator</code> and it behaves differently. When declaring a function with ..., we can pass as many parameters into the function itselt when executing it as we want.",
        "Note that in the function <code>hai</code>, we return <code>arguments[arguments[0]]</code> which means <code>hai(1, 2, 3)</code> will return 2 rathern than 1 because <code>arguments[0]</code> return 1 and then <code>arguments[1]</code> returns 2.",
        "The last thing we have to take note is that the typeof operator of an array will return <code>object</code>, here the trick seems more daunting. The final anwser is 2 as we got it in <code>a[1]</code>, or <code>hai(1, 2, 3)</code>."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "41. What's the output?",
      "innerHTML": "<a id=\"user-content-41-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#41-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>41. What's the output?",
      "id": "user-content-41-whats-the-output",
      "index": "41",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "class Component {\n  constructor(age) {\n    this.age = age + `${typeof Coder}`.length;\n  }\n\n  getAge() {\n    return ++this.age;\n  }\n}\n\nclass Coder extends Component {\n  constructor(age) {\n    super(age);\n    this.age = age - `${typeof Coder}`.length;\n  }\n}\n\nconst a = new Coder(16);\n\nconsole.log(a.getAge());",
      "innerHTML": "<pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">Component</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">age</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">age</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-k\">typeof</span> <span class=\"pl-v\">Coder</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">getAge</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">++</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-v\">Coder</span> <span class=\"pl-k\">extends</span> <span class=\"pl-v\">Component</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">age</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">super</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">age</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">age</span> <span class=\"pl-c1\">-</span> <span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-k\">typeof</span> <span class=\"pl-v\">Coder</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Coder</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">16</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getAge</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 7\nB: 8\nC: 9\nD: 10",
      "innerHTML": "\n<li>A: 7</li>\n<li>B: 8</li>\n<li>C: 9</li>\n<li>D: 10</li>\n",
      "options": [
        ["A", "7"],
        ["B", "8"],
        ["C", "9"],
        ["D", "10"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-10\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-10\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: C</h4>\n<p>We have two simple classes in which Coder extends Component. Nothing fancy. As <code>typeof ClassName</code> returns <code>function</code> rather than <code>class</code>, we then get 8 in the operator <code>\"function\".length</code>.</p>\n<p>Though we implement <code>super(age)</code> in the Coder class, we actually overwrite the contructor of the parent class Component in the child class Coder. Therefore, when initiating the object <code>a</code>, the following code is automatically triggered <code>this.age = age -</code>${typeof Coder}<code>.length;</code>. The difference between the child and parent 's constructor is minus (-) and plus (+) in the above code.</p>\n<p>As such, we have 16 - 8 rather than 16 + 8, which returns 8. The function <code>getAge()</code> returns 9, so the corrent answer is C.</p>\n<p>Bear in mind that JavaSCript is not a \"real\" OOP programming language even though we can now implement <code>class</code> and <code>object</code> as in other languages.</p>\n<p></p>\n",
      "answer": "C",
      "description": [
        "We have two simple classes in which Coder extends Component. Nothing fancy. As <code>typeof ClassName</code> returns <code>function</code> rather than <code>class</code>, we then get 8 in the operator <code>\"function\".length</code>.",
        "Though we implement <code>super(age)</code> in the Coder class, we actually overwrite the contructor of the parent class Component in the child class Coder. Therefore, when initiating the object <code>a</code>, the following code is automatically triggered <code>this.age = age -</code>${typeof Coder}<code>.length;</code>. The difference between the child and parent 's constructor is minus (-) and plus (+) in the above code.",
        "As such, we have 16 - 8 rather than 16 + 8, which returns 8. The function <code>getAge()</code> returns 9, so the corrent answer is C.",
        "Bear in mind that JavaSCript is not a \"real\" OOP programming language even though we can now implement <code>class</code> and <code>object</code> as in other languages."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "42. What's the output?",
      "innerHTML": "<a id=\"user-content-42-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#42-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>42. What's the output?",
      "id": "user-content-42-whats-the-output",
      "index": "42",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "class RemoveFalse {\n  constructor(element) {\n    this.element = element;\n\n    this.length = this.removeFalse().length;\n  }\n\n  removeFalse() {\n    this.element = this.element.filter(Boolean);\n\n    return this.element;\n  }\n}\n\nconst theArray = [true, false, 1, 0, NaN, undefined, \"\", null, \"js.edu.vn\"];\n\nconst a = new RemoveFalse(theArray);\n\nconsole.log(a.length);",
      "innerHTML": "<pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">RemoveFalse</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">constructor</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">element</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">element</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">element</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">removeFalse</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">removeFalse</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">element</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">element</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">filter</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Boolean</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">element</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">theArray</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">false</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">NaN</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">undefined</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">null</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"js.edu.vn\"</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">RemoveFalse</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">theArray</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: false\nB: true\nC: 2\nD: 3",
      "innerHTML": "\n<li>A: false</li>\n<li>B: true</li>\n<li>C: 2</li>\n<li>D: 3</li>\n",
      "options": [
        ["A", "false"],
        ["B", "true"],
        ["C", "2"],
        ["D", "3"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-18\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-18\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>The key message that can be taken away in the code snippet above is <code>filer(Boolean)</code> which can be taken into consideration in case you want to eliminate <code>falsy values</code> in an array. We can use <code>filter(callback)</code> or <code>filter(Boolean)</code> in particular in this case to do that. Note that we have to pass into the filter function a callback and in this case Boolean is actually a function. You can check <code>typeof Boolean</code> to see it.</p>\n<p>Similar to <code>map</code> or <code>reduce</code> function, <code>filter</code> always returns a new array from the exisiting one. <code>[true, false, 1, 0, NaN, undefined, \"\", null, \"js.edu.vn\"].filter(Boolean);</code> will return <code>[true, 1, \"js.edu.vn\"];</code>, hence calling the function <code>removeFalse()</code> gives us 3. So the correct answer is 3.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "The key message that can be taken away in the code snippet above is <code>filer(Boolean)</code> which can be taken into consideration in case you want to eliminate <code>falsy values</code> in an array. We can use <code>filter(callback)</code> or <code>filter(Boolean)</code> in particular in this case to do that. Note that we have to pass into the filter function a callback and in this case Boolean is actually a function. You can check <code>typeof Boolean</code> to see it.",
        "Similar to <code>map</code> or <code>reduce</code> function, <code>filter</code> always returns a new array from the exisiting one. <code>[true, false, 1, 0, NaN, undefined, \"\", null, \"js.edu.vn\"].filter(Boolean);</code> will return <code>[true, 1, \"js.edu.vn\"];</code>, hence calling the function <code>removeFalse()</code> gives us 3. So the correct answer is 3."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "43. What's the output?",
      "innerHTML": "<a id=\"user-content-43-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#43-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>43. What's the output?",
      "id": "user-content-43-whats-the-output",
      "index": "43",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const coderfarm = [1, [], {}, [], 2, 3];\n\nconst converted = Number(coderfarm instanceof Array);\n\nconst result = coderfarm.indexOf(converted + true);\n\nconsole.log(result);",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">coderfarm</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">converted</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Number</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">coderfarm</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Array</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">coderfarm</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">indexOf</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">converted</span> <span class=\"pl-c1\">+</span> <span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: []\nB: {}\nC: 2\nD: 4",
      "innerHTML": "\n<li>A: []</li>\n<li>B: {}</li>\n<li>C: 2</li>\n<li>D: 4</li>\n",
      "options": [
        ["A", "[]"],
        ["B", "{}"],
        ["C", "2"],
        ["D", "4"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-19\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-19\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>We have a simple array in the code snippet above that includes some digits, two other arrays and one object. Using the built-in function <code>Number</code>, we can convert any value passing to the function into <code>digit</code>. As <code>coderfarm instanceof Array</code> returns <code>true</code>, then <code>converted</code> get 1. Noted that you can use another way to check the type of an array is <code>Array.isArrray(arrayToBeChecked)</code> which return a <code>boolean</code> value. Suprisingly, the operator <code>typeof []</code> returns <code>object</code> rather than <code>array</code>.</p>\n<p>The built-in function <code>indexOf</code> will return the index of the element that is being checked. So as <code>converted + true</code> return 2, we are going to check the index of the element with the value 2 in the array <code>coderfarm</code>.</p>\n<p>We get 4 in the <code>console.log</code> and the correct answer is D.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "We have a simple array in the code snippet above that includes some digits, two other arrays and one object. Using the built-in function <code>Number</code>, we can convert any value passing to the function into <code>digit</code>. As <code>coderfarm instanceof Array</code> returns <code>true</code>, then <code>converted</code> get 1. Noted that you can use another way to check the type of an array is <code>Array.isArrray(arrayToBeChecked)</code> which return a <code>boolean</code> value. Suprisingly, the operator <code>typeof []</code> returns <code>object</code> rather than <code>array</code>.",
        "The built-in function <code>indexOf</code> will return the index of the element that is being checked. So as <code>converted + true</code> return 2, we are going to check the index of the element with the value 2 in the array <code>coderfarm</code>.",
        "We get 4 in the <code>console.log</code> and the correct answer is D."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "44. What's the output?",
      "innerHTML": "<a id=\"user-content-44-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#44-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>44. What's the output?",
      "id": "user-content-44-whats-the-output",
      "index": "44",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const converter = (arrayInput) => {\n  return { ...arrayInput };\n};\n\nconst content = [\"function\", \"object\", \"decorator\"];\n\nconst checking = content[Number(false)];\n\nconst result = typeof converter(content) === content[1];\n\nconsole.log(checking ? (result ? (typeof converter).length : false) : false);",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-en\">converter</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">arrayInput</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span> ...<span class=\"pl-s1\">arrayInput</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">content</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-s\">\"function\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"object\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"decorator\"</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">checking</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">content</span><span class=\"pl-kos\">[</span><span class=\"pl-v\">Number</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">false</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-en\">converter</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">content</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">content</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">checking</span> ? <span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span> ? <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-en\">converter</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> : <span class=\"pl-c1\">false</span><span class=\"pl-kos\">)</span> : <span class=\"pl-c1\">false</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 6\nB: NaN\nC: true\nD: 8",
      "innerHTML": "\n<li>A: 6</li>\n<li>B: NaN</li>\n<li>C: true</li>\n<li>D: 8</li>\n",
      "options": [
        ["A", "6"],
        ["B", "NaN"],
        ["C", "true"],
        ["D", "8"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-20\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-20\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>The operator <code>...</code> in JavaScript is very handy. The function <code>converter</code> is quite trivial, it takes advantege of <code>...</code> (rest operator || spread operator) to turn an array into an object.</p>\n<p>First we have the constant <code>checking</code> with the value <code>function</code> given that <code>Number(false)</code> gives us 0 and that is the first index in the array <code>content</code>.</p>\n<p>Second, the constant <code>result</code> gives us the value <code>true</code> as the <code>typeof converter(content)</code> is <code>function</code>, which is also the value of <code>content[1]</code>.</p>\n<p>Then in the final code, we have <code>checking = true</code>, and then <code>result = true</code> as well, so the final result is <code>(typeof converter).length</code> which is equivalent to <code>\"function\".length</code> because the <code>typeof of converter</code> is simply <code>function</code>. We get 8 after all and the correct answer is D.</p>\n<p>So the key message here is that we can take advantate of the <code>spread operator</code> (or <code>...</code>) to turn an array to an object. For example: <code>const a = [\"hello\", 2]</code>, then we can have a go with <code>const b = {...a}</code> and b is now an object with the following value: <code>{0: \"hello\", 1: 2}</code>. The key of the object is actually the index of the original array.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "The operator <code>...</code> in JavaScript is very handy. The function <code>converter</code> is quite trivial, it takes advantege of <code>...</code> (rest operator || spread operator) to turn an array into an object.",
        "First we have the constant <code>checking</code> with the value <code>function</code> given that <code>Number(false)</code> gives us 0 and that is the first index in the array <code>content</code>.",
        "Second, the constant <code>result</code> gives us the value <code>true</code> as the <code>typeof converter(content)</code> is <code>function</code>, which is also the value of <code>content[1]</code>.",
        "Then in the final code, we have <code>checking = true</code>, and then <code>result = true</code> as well, so the final result is <code>(typeof converter).length</code> which is equivalent to <code>\"function\".length</code> because the <code>typeof of converter</code> is simply <code>function</code>. We get 8 after all and the correct answer is D.",
        "So the key message here is that we can take advantate of the <code>spread operator</code> (or <code>...</code>) to turn an array to an object. For example: <code>const a = [\"hello\", 2]</code>, then we can have a go with <code>const b = {...a}</code> and b is now an object with the following value: <code>{0: \"hello\", 1: 2}</code>. The key of the object is actually the index of the original array."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "45. What's the output?",
      "innerHTML": "<a id=\"user-content-45-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#45-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>45. What's the output?",
      "id": "user-content-45-whats-the-output",
      "index": "45",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "function* js(length) {\n  for (let i = length.length; i > 0; --i) {\n    yield i;\n  }\n}\n\nlet getJS = js(typeof js);\n\nlet result = getJS.next().value;\n\nconsole.log(result + getJS.next().value);",
      "innerHTML": "<pre><span class=\"pl-k\">function</span>* <span class=\"pl-s1\">js</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">length</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">length</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-c1\">--</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">yield</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">getJS</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">js</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">js</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">getJS</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">getJS</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 10\nB: 14\nC: 15\nD: 16",
      "innerHTML": "\n<li>A: 10</li>\n<li>B: 14</li>\n<li>C: 15</li>\n<li>D: 16</li>\n",
      "options": [
        ["A", "10"],
        ["B", "14"],
        ["C", "15"],
        ["D", "16"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-11\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-11\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: C</h4>\n<p>We have a generator function in the code snippet above, which is defined with the *. Noted that we can \"store\" as many result as we want in a generator thanks to the keyword <code>yield</code>.</p>\n<p>As the <code>typeof js</code> is <code>function</code>, so the length of the string <code>function</code> is 8. So when calling <code>getJS.next().value;</code>, we get 8. However, in the next calling, it returns 7, and in the following calling after that, we get 6. That is why generator can \"store\" and \"release\" (or return) as many value as we want.</p>\n<p>So the answer is C, which is 8 (first execution of the generator) + 7 (second execution of the generator).</p>\n<p></p>\n",
      "answer": "C",
      "description": [
        "We have a generator function in the code snippet above, which is defined with the *. Noted that we can \"store\" as many result as we want in a generator thanks to the keyword <code>yield</code>.",
        "As the <code>typeof js</code> is <code>function</code>, so the length of the string <code>function</code> is 8. So when calling <code>getJS.next().value;</code>, we get 8. However, in the next calling, it returns 7, and in the following calling after that, we get 6. That is why generator can \"store\" and \"release\" (or return) as many value as we want.",
        "So the answer is C, which is 8 (first execution of the generator) + 7 (second execution of the generator)."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "46. What's the output?",
      "innerHTML": "<a id=\"user-content-46-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#46-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>46. What's the output?",
      "id": "user-content-46-whats-the-output",
      "index": "46",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "var ages = [10, 15, 20, 25];\n\nlet response = [];\n\nages.some(function (currentValue, index, ages) {\n  if (currentValue > ages[ages.length - index])\n    response.push(currentValue + ages.length);\n});\n\nconsole.log(response);",
      "innerHTML": "<pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">ages</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">10</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">15</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">20</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">25</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">response</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">ages</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">some</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">currentValue</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">index</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">ages</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">currentValue</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-s1\">ages</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">ages</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">-</span> <span class=\"pl-s1\">index</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-s1\">response</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">currentValue</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">ages</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">response</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: [20]\nB: [20, 25]\nC: [25, 29]\nD: [29]",
      "innerHTML": "\n<li>A: [20]</li>\n<li>B: [20, 25]</li>\n<li>C: [25, 29]</li>\n<li>D: [29]</li>\n",
      "options": [
        ["A", "[20]"],
        ["B", "[20, 25]"],
        ["C", "[25, 29]"],
        ["D", "[29]"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-21\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-21\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p><code>Array.prototype.some()</code> is a built-in function facilitating us to iterate the array using a callback. As in the code snippet above, there are three parameters in the callback, namely <code>currentValue</code> (the value of the current element that is being checked), <code>index</code> (the index of the element in the array that is being checked/evaluated) and <code>ages</code> (the array itself).</p>\n<p>The function <code>some()</code> returns a <code>boolean</code> value. The code <code>currentValue &gt; ages[ages.length - index]</code> returns <code>true</code> only one time, which is the last element. Let 's examine the code when it runs through each element:</p>\n<ol>\n<li>\n<p>10 &gt; ages[4 - 0]. As ages[4] returns <code>undefined</code>, and <code>10 &gt; undefined</code> returns <code>false</code>, it stops.</p>\n</li>\n<li>\n<p>15 &gt; ages[4 - 1]. As ages[3] returns 25, it breaks as the operator returns <code>false</code>.</p>\n</li>\n<li>\n<p>20 &gt; ages[4 - 2]. As ages[2] returns 20, it breaks as the operator returns <code>false</code>.</p>\n</li>\n<li>\n<p>25 &gt; ages[4 - 3]. As ages[1] returns 10, it returns <code>true</code>. Only this value is being pushed to the array <code>response</code>.</p>\n</li>\n</ol>\n<p>So <code>response.push(currentValue + ages.length)</code> will add the value 25 + 4 to the array <code>response</code>, D is the correct answer.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "<code>Array.prototype.some()</code> is a built-in function facilitating us to iterate the array using a callback. As in the code snippet above, there are three parameters in the callback, namely <code>currentValue</code> (the value of the current element that is being checked), <code>index</code> (the index of the element in the array that is being checked/evaluated) and <code>ages</code> (the array itself).",
        "The function <code>some()</code> returns a <code>boolean</code> value. The code <code>currentValue &gt; ages[ages.length - index]</code> returns <code>true</code> only one time, which is the last element. Let 's examine the code when it runs through each element:",
        "So <code>response.push(currentValue + ages.length)</code> will add the value 25 + 4 to the array <code>response</code>, D is the correct answer."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "47. What's the output?",
      "innerHTML": "<a id=\"user-content-47-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#47-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>47. What's the output?",
      "id": "user-content-47-whats-the-output",
      "index": "47",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const getSTring = (string, method = false) => {\n  if (method === true) {\n    return string.slice(1, 4).length;\n  }\n\n  return string.substr(1, 4).length;\n};\n\nconsole.log(getSTring(\"hello\", true) + getSTring(\"hello\"));",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-en\">getSTring</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">string</span><span class=\"pl-kos\">,</span> method <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">false</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">method</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">string</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">slice</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">4</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">string</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">substr</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">4</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">getSTring</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"hello\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">+</span> <span class=\"pl-en\">getSTring</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"hello\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 6\nB: 7\nC: 8\nD: 9",
      "innerHTML": "\n<li>A: 6</li>\n<li>B: 7</li>\n<li>C: 8</li>\n<li>D: 9</li>\n",
      "options": [
        ["A", "6"],
        ["B", "7"],
        ["C", "8"],
        ["D", "9"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-6\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-6\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: B</h4>\n<p><code>getString()</code> is an arrow function with two parameters. As you can see that the parameter <code>method</code> has the default value <code>false</code>, then if you do not pass any value to it when executing the function, the default value will be used.</p>\n<p>The key thing to take note from the code above is the difference betweet <code>slice(1, 4)</code> (which returns 3 characters) and <code>substr(1, 4)</code> (which returns 4 ones).</p>\n<p>Finally <code>console.log(getSTring(\"hello\", true) + getSTring(\"hello\"))</code> returns 7 because <code>slice</code> and <code>substr</code> are both used.</p>\n<p></p>\n",
      "answer": "B",
      "description": [
        "<code>getString()</code> is an arrow function with two parameters. As you can see that the parameter <code>method</code> has the default value <code>false</code>, then if you do not pass any value to it when executing the function, the default value will be used.",
        "The key thing to take note from the code above is the difference betweet <code>slice(1, 4)</code> (which returns 3 characters) and <code>substr(1, 4)</code> (which returns 4 ones).",
        "Finally <code>console.log(getSTring(\"hello\", true) + getSTring(\"hello\"))</code> returns 7 because <code>slice</code> and <code>substr</code> are both used."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "48. What's the output?",
      "innerHTML": "<a id=\"user-content-48-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#48-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>48. What's the output?",
      "id": "user-content-48-whats-the-output",
      "index": "48",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "(function (a, b, c) {\n  console.log(Boolean([...arguments].slice(2, 3)[0].slice(3, 4)));\n})(\"hello\", \"world\", \"new zealand\");",
      "innerHTML": "<pre><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">b</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">c</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Boolean</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span>...<span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">slice</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">slice</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">4</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"hello\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"world\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"new zealand\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: \"new\"\nB: true\nC: \"land\"\nD: false",
      "innerHTML": "\n<li>A: \"new\"</li>\n<li>B: true</li>\n<li>C: \"land\"</li>\n<li>D: false</li>\n",
      "options": [
        ["A", "\"new\""],
        ["B", "true"],
        ["C", "\"land\""],
        ["D", "false"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-7\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-7\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: B</h4>\n<p>The code above is a self-executing function. It runs when it is being declared. We have three parameters and three arguments passed are <code>\"hello\", \"world\"</code> and <code>\"new zealand\"</code>.</p>\n<p>First, <code>arguments</code> returns an object consisting of arguments passed to the function when executing it. However, using spread operator <code>...</code>, we then convert the object to an array. We can also do it by using <code>Array.from(object)</code>.</p>\n<p>Second, <code>slice(2, 3)</code> extracts the element from the index 2 to the index 3, which returns <code>\"new zealand\"</code>. It is still an array. We then extract the element with the index <code>[0]</code> and we get the string <code>\"new zealand\"</code> rather than an array.</p>\n<p>Third, <code>\"new zealand\".slice(3, 4)</code> gives us an empty string (with a space between) <code>\" \"</code>. The <code>Boolean(\" \")</code> gives us <code>true</code>. Noted that if there is no space in the empty string, we get <code>false</code> instead.</p>\n<p>So the correct answer is B.</p>\n<p></p>\n",
      "answer": "B",
      "description": [
        "The code above is a self-executing function. It runs when it is being declared. We have three parameters and three arguments passed are <code>\"hello\", \"world\"</code> and <code>\"new zealand\"</code>.",
        "First, <code>arguments</code> returns an object consisting of arguments passed to the function when executing it. However, using spread operator <code>...</code>, we then convert the object to an array. We can also do it by using <code>Array.from(object)</code>.",
        "Second, <code>slice(2, 3)</code> extracts the element from the index 2 to the index 3, which returns <code>\"new zealand\"</code>. It is still an array. We then extract the element with the index <code>[0]</code> and we get the string <code>\"new zealand\"</code> rather than an array.",
        "Third, <code>\"new zealand\".slice(3, 4)</code> gives us an empty string (with a space between) <code>\" \"</code>. The <code>Boolean(\" \")</code> gives us <code>true</code>. Noted that if there is no space in the empty string, we get <code>false</code> instead.",
        "So the correct answer is B."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "49. What's the output?",
      "innerHTML": "<a id=\"user-content-49-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#49-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>49. What's the output?",
      "id": "user-content-49-whats-the-output",
      "index": "49",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "class HocCoBan {\n  name = \"hello world\";\n\n  getSlice(slice) {\n    return this.getName(slice).slice(true, this.name.length);\n  }\n\n  getName(space) {\n    return this.name.split(space);\n  }\n}\n\nHocCoBan.prototype.split = function (argument) {\n  return this.getSlice(argument);\n};\n\nconst a = new HocCoBan();\n\nconsole.log(a.split(\"\").length);",
      "innerHTML": "<pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">HocCoBan</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"hello world\"</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-en\">getSlice</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">slice</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getName</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">slice</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">slice</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-en\">getName</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">space</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">split</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">space</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">HocCoBan</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">split</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">argument</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getSlice</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">argument</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">HocCoBan</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">split</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: NaN\nB: true\nC: 10\nD: 11",
      "innerHTML": "\n<li>A: NaN</li>\n<li>B: true</li>\n<li>C: 10</li>\n<li>D: 11</li>\n",
      "options": [
        ["A", "NaN"],
        ["B", "true"],
        ["C", "10"],
        ["D", "11"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-12\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-12\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: C</h4>\n<p>The code above is nothing much special. However it is written in a complicated way on purpose. First, we have a class named \"HocCoBan\" with two methods and one property. Then we add another method <code>split</code> using the tradional way (via <code>prototype</code>). Note that <code>class</code> in JavaScript is simply a syntactic sugar of <code>function</code> given that <code>typeof ClassName</code> return <code>function</code>.</p>\n<p>When we call the method <code>split</code>, we pass the an empty string to it. This method then call other methods. The flow is as follows:</p>\n<p><code>split(\"\")</code> ==&gt; <code>this.getSlice(\"\")</code> ==&gt; <code>this.getName(\"\")</code> ==&gt; <code>this.name.split(\"\")</code>. Here <code>split</code> is a built-in function that convert a string to an array.</p>\n<p>Noted that in <code>getSlice()</code>, we also use <code>.slice(true, this.name.length)</code> to <code>slice</code> (cut) the array from the index 1 to 11. So the length is 10.</p>\n<p>So the final answer is C.</p>\n<p>This code might help us master the concept function <code>prototype</code> in JavaScript and the understand the difference between the built in function <code>String.prototype.split</code> and the function we declare by ourself <code>HocCoBan.prototype.split</code>.</p>\n<p></p>\n",
      "answer": "C",
      "description": [
        "The code above is nothing much special. However it is written in a complicated way on purpose. First, we have a class named \"HocCoBan\" with two methods and one property. Then we add another method <code>split</code> using the tradional way (via <code>prototype</code>). Note that <code>class</code> in JavaScript is simply a syntactic sugar of <code>function</code> given that <code>typeof ClassName</code> return <code>function</code>.",
        "When we call the method <code>split</code>, we pass the an empty string to it. This method then call other methods. The flow is as follows:",
        "<code>split(\"\")</code> ==&gt; <code>this.getSlice(\"\")</code> ==&gt; <code>this.getName(\"\")</code> ==&gt; <code>this.name.split(\"\")</code>. Here <code>split</code> is a built-in function that convert a string to an array.",
        "Noted that in <code>getSlice()</code>, we also use <code>.slice(true, this.name.length)</code> to <code>slice</code> (cut) the array from the index 1 to 11. So the length is 10.",
        "So the final answer is C.",
        "This code might help us master the concept function <code>prototype</code> in JavaScript and the understand the difference between the built in function <code>String.prototype.split</code> and the function we declare by ourself <code>HocCoBan.prototype.split</code>."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "50. What's the output?",
      "innerHTML": "<a id=\"user-content-50-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#50-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>50. What's the output?",
      "id": "user-content-50-whats-the-output",
      "index": "50",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "function javaScript(node) {\n  let mot = node.includes(\"I\") ? \"love\" : \"you\";\n\n  return function (deno = mot) {\n    let hai = node.replace(deno, \"done\");\n\n    return function (done = hai) {\n      return (node + deno + done).length;\n    };\n  };\n}\n\nconsole.log(javaScript(\"I love you\")()());",
      "innerHTML": "<pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">javaScript</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">mot</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">includes</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"I\"</span><span class=\"pl-kos\">)</span> ? <span class=\"pl-s\">\"love\"</span> : <span class=\"pl-s\">\"you\"</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span>deno <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">mot</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">hai</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">node</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">replace</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">deno</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"done\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span>done <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">hai</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">node</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">deno</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">done</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">javaScript</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"I love you\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 18\nB: 24\nC: 20\nD: 25",
      "innerHTML": "\n<li>A: 18</li>\n<li>B: 24</li>\n<li>C: 20</li>\n<li>D: 25</li>\n",
      "options": [
        ["A", "18"],
        ["B", "24"],
        ["C", "20"],
        ["D", "25"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-8\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-8\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: B</h4>\n<p>Apart from learning some built-in functions to handle string such as <code>replace</code> and <code>inclues</code>, we are reviving the concept of <code>currying function</code> in JavaScript. Say you want to declare a function with three parameters, you may consider refactoring the code by declaring 3 nested functions, each with one parameter you wish to pass to. Basically, both of them work in the same way. However, noted that only the outerest (the main) function has the name as <code>javaScript</code> in the code above. Both nested (inner) functions are declared without the name. We also use three <code>return</code> keywords in the code.</p>\n<p>When executing the function, you then have three <code>()</code> as in the <code>javaScript(\"I love you\")()()</code>. We do not pass any argument into the second and third functions (both are inner/nested functions without the name) and these functions will take the default value we have alreaded declared when being executing.</p>\n<p>All in all, we have the final operator <code>return (node + deno + done).length;</code> in which <code>node</code> is \"I love you\", <code>deno</code> is \"love\" and <code>done</code> is \"I done you\". The length of these strings is 24, which you can calculate by yourself the concatenated string <code>I love youyou I done you</code>. Be aware of the <code>empty space</code>, which is also taken into account.</p>\n<p></p>\n",
      "answer": "B",
      "description": [
        "Apart from learning some built-in functions to handle string such as <code>replace</code> and <code>inclues</code>, we are reviving the concept of <code>currying function</code> in JavaScript. Say you want to declare a function with three parameters, you may consider refactoring the code by declaring 3 nested functions, each with one parameter you wish to pass to. Basically, both of them work in the same way. However, noted that only the outerest (the main) function has the name as <code>javaScript</code> in the code above. Both nested (inner) functions are declared without the name. We also use three <code>return</code> keywords in the code.",
        "When executing the function, you then have three <code>()</code> as in the <code>javaScript(\"I love you\")()()</code>. We do not pass any argument into the second and third functions (both are inner/nested functions without the name) and these functions will take the default value we have alreaded declared when being executing.",
        "All in all, we have the final operator <code>return (node + deno + done).length;</code> in which <code>node</code> is \"I love you\", <code>deno</code> is \"love\" and <code>done</code> is \"I done you\". The length of these strings is 24, which you can calculate by yourself the concatenated string <code>I love youyou I done you</code>. Be aware of the <code>empty space</code>, which is also taken into account."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "51. What's the output?",
      "innerHTML": "<a id=\"user-content-51-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#51-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>51. What's the output?",
      "id": "user-content-51-whats-the-output",
      "index": "51",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const www = [\"hello\", \"coranovirus\", \"kiora\", \"world\", \"new zealand\"];\n\nconst found = www.find(function (world) {\n  return world > \"victory\";\n});\n\nconst result = found[1] < www[0][0] ? www[false ? 1 : 0] : www[true ? 0 : 1];\n\nconsole.log(result);",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">www</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-s\">\"hello\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"coranovirus\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"kiora\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"world\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"new zealand\"</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">found</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">www</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">find</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">world</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">world</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-s\">\"victory\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">found</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">www</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span> ? <span class=\"pl-s1\">www</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">false</span> ? <span class=\"pl-c1\">1</span> : <span class=\"pl-c1\">0</span><span class=\"pl-kos\">]</span> : <span class=\"pl-s1\">www</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">true</span> ? <span class=\"pl-c1\">0</span> : <span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: \"hello\"\nB: \"world\"\nC: \"victory\"\nD: \"w\"",
      "innerHTML": "\n<li>A: \"hello\"</li>\n<li>B: \"world\"</li>\n<li>C: \"victory\"</li>\n<li>D: \"w\"</li>\n",
      "options": [
        ["A", "\"hello\""],
        ["B", "\"world\""],
        ["C", "\"victory\""],
        ["D", "\"w\""]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-5\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-5\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: A</h4>\n<p>The key information in the question above is about the method <code>Array.prototype.find()</code>. It returns the first element in the array that meets the condition declared in the callback function, which is passed to the function. The array is being iterated to check every single element. In the code above, we might easily see that the element <code>world</code> is the first element in the array that has a larger value than <code>victory</code>. Remember that \"w\" &gt; \"v\" return trues if the two letters are compared. When two words are being compared, only the first letter in each word is being utilised to compare.</p>\n<p>As the result, <code>found</code> is now <code>world</code> and thus <code>found[1]</code> returns the letter <code>w</code> whereas <code>www[0][0]</code> gives us the letter <code>h</code> in the element <code>hello</code>. It means <code>found[1] &lt; www[0][0]</code> returns <code>false</code>.</p>\n<p>So the final result is <code>www[true ? 0: 1]</code> or <code>www[0]</code>, which is <code>hello</code>. And the correct answer is A.</p>\n<p></p>\n",
      "answer": "A",
      "description": [
        "The key information in the question above is about the method <code>Array.prototype.find()</code>. It returns the first element in the array that meets the condition declared in the callback function, which is passed to the function. The array is being iterated to check every single element. In the code above, we might easily see that the element <code>world</code> is the first element in the array that has a larger value than <code>victory</code>. Remember that \"w\" &gt; \"v\" return trues if the two letters are compared. When two words are being compared, only the first letter in each word is being utilised to compare.",
        "As the result, <code>found</code> is now <code>world</code> and thus <code>found[1]</code> returns the letter <code>w</code> whereas <code>www[0][0]</code> gives us the letter <code>h</code> in the element <code>hello</code>. It means <code>found[1] &lt; www[0][0]</code> returns <code>false</code>.",
        "So the final result is <code>www[true ? 0: 1]</code> or <code>www[0]</code>, which is <code>hello</code>. And the correct answer is A."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "52. What's the output?",
      "innerHTML": "<a id=\"user-content-52-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#52-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>52. What's the output?",
      "id": "user-content-52-whats-the-output",
      "index": "52",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "(function (flag) {\n  let age = Boolean(NaN === NaN ? false : flag);\n\n  console.log(age.toString()[Number(flag)]);\n})([]);",
      "innerHTML": "<pre><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">flag</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">age</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Boolean</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">NaN</span> <span class=\"pl-c1\">===</span> <span class=\"pl-v\">NaN</span> ? <span class=\"pl-c1\">false</span> : <span class=\"pl-s1\">flag</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">age</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toString</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">[</span><span class=\"pl-v\">Number</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">flag</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: \"f\"\nB: \"t\"\nC: true\nD: false",
      "innerHTML": "\n<li>A: \"f\"</li>\n<li>B: \"t\"</li>\n<li>C: true</li>\n<li>D: false</li>\n",
      "options": [
        ["A", "\"f\""],
        ["B", "\"t\""],
        ["C", "true"],
        ["D", "false"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-9\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-9\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: B</h4>\n<p>We have a self-executing function with the parameter/argument is an empty array. Noted that <code>NaN === NaN</code> returns <code>false</code>, then <code>age</code> gets the value <code>flag</code>, which is an empty array. However, the boolean value is <code>true</code> when we call <code>Boolean([])</code>.</p>\n<p>The function <code>toString()</code> returns the string <code>true</code> and the <code>Number([])</code> returns <code>0</code>. Then we get \"t\" in the console.log. The correct answer is B.</p>\n<p>Keep in mind that <code>Boolean([])</code> ==&gt; <code>true</code> but <code>Number([])</code> ==&gt; <code>0</code>. And sadly <code>NaN === NaN</code> returns <code>false</code>.</p>\n<p></p>\n",
      "answer": "B",
      "description": [
        "We have a self-executing function with the parameter/argument is an empty array. Noted that <code>NaN === NaN</code> returns <code>false</code>, then <code>age</code> gets the value <code>flag</code>, which is an empty array. However, the boolean value is <code>true</code> when we call <code>Boolean([])</code>.",
        "The function <code>toString()</code> returns the string <code>true</code> and the <code>Number([])</code> returns <code>0</code>. Then we get \"t\" in the console.log. The correct answer is B.",
        "Keep in mind that <code>Boolean([])</code> ==&gt; <code>true</code> but <code>Number([])</code> ==&gt; <code>0</code>. And sadly <code>NaN === NaN</code> returns <code>false</code>."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "53. What's the output?",
      "innerHTML": "<a id=\"user-content-53-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#53-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>53. What's the output?",
      "id": "user-content-53-whats-the-output",
      "index": "53",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "1) console.log(Boolean([]));\n2) console.log(Number([]));\n3) console.log(Number(Boolean([])));\n4) console.log(Boolean(Number([])));\n\n5) console.log(Boolean({}));\n6) console.log(Number({}));\n7) console.log(Number(Boolean({})));\n8) console.log(Boolean(Number({})));\n\n9) console.log(Boolean(new Boolean(false)));",
      "innerHTML": "<pre><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Boolean</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Number</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Number</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Boolean</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c1\">4</span><span class=\"pl-kos\">)</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Boolean</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Number</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Boolean</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c1\">6</span><span class=\"pl-kos\">)</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Number</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c1\">7</span><span class=\"pl-kos\">)</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Number</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Boolean</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c1\">8</span><span class=\"pl-kos\">)</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Boolean</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Number</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c1\">9</span><span class=\"pl-kos\">)</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Boolean</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">Boolean</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">false</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: true - 0 - 1 - false - true - 1 - 1 - false - false\nB: true - 0 - 1 - false - false - NaN - 1 - false - true\nC: true - 0 - 1 - false - false - false - 1 - false - false\nD: true - 0 - 1 - false - true - NaN - 1 - false - true",
      "innerHTML": "\n<li>A: true - 0 - 1 - false - true - 1 - 1 - false - false</li>\n<li>B: true - 0 - 1 - false - false - NaN - 1 - false - true</li>\n<li>C: true - 0 - 1 - false - false - false - 1 - false - false</li>\n<li>D: true - 0 - 1 - false - true - NaN - 1 - false - true</li>\n",
      "options": [
        [
          "A",
          "true - 0 - 1 - false - true - 1 - 1 - false - false"
        ],
        [
          "B",
          "true - 0 - 1 - false - false - NaN - 1 - false - true"
        ],
        [
          "C",
          "true - 0 - 1 - false - false - false - 1 - false - false"
        ],
        [
          "D",
          "true - 0 - 1 - false - true - NaN - 1 - false - true"
        ]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-22\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-22\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>JavaScript is sometimes tedious to deal with given that it is a loosely type language. The data type of a variable can be changed depending on the value. An unexpected behaviour might unfortunately occur when you change/convert the original value to another one.</p>\n<p>For example, the code 2 <code>Number([])</code> returns <code>0</code> and 6 <code>(Number({}))</code> returns <code>NaN</code>, although both <code>(Boolean([]))</code> and <code>(Boolean({}))</code> return <code>true</code>.</p>\n<p>In the code 9 <code>Boolean(new Boolean(false))</code>, we get <code>true</code> even though we pass into the function constructor <code>Boolean()</code> a <code>false</code> (as the) parameter. However, if we do not use the keyword <code>new</code>, then <code>false</code> will return. It seems that in <code>Boolean(new Boolean(false))</code>, we have a valid opreration, so it is <code>true</code>. However, in the <code>Boolean(Boolean(false)))</code> where we do not use the keyword <code>new</code>, we then get <code>false</code> because now a <code>false</code> value is being evaluated rather than an operation.</p>\n<p>So, the correct answer is D.</p>\n<p>Credit: @tiepphan, Vietnamese Angular Facebook group.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "JavaScript is sometimes tedious to deal with given that it is a loosely type language. The data type of a variable can be changed depending on the value. An unexpected behaviour might unfortunately occur when you change/convert the original value to another one.",
        "For example, the code 2 <code>Number([])</code> returns <code>0</code> and 6 <code>(Number({}))</code> returns <code>NaN</code>, although both <code>(Boolean([]))</code> and <code>(Boolean({}))</code> return <code>true</code>.",
        "In the code 9 <code>Boolean(new Boolean(false))</code>, we get <code>true</code> even though we pass into the function constructor <code>Boolean()</code> a <code>false</code> (as the) parameter. However, if we do not use the keyword <code>new</code>, then <code>false</code> will return. It seems that in <code>Boolean(new Boolean(false))</code>, we have a valid opreration, so it is <code>true</code>. However, in the <code>Boolean(Boolean(false)))</code> where we do not use the keyword <code>new</code>, we then get <code>false</code> because now a <code>false</code> value is being evaluated rather than an operation.",
        "So, the correct answer is D.",
        "Credit: @tiepphan, Vietnamese Angular Facebook group."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "54. What's the output?",
      "innerHTML": "<a id=\"user-content-54-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#54-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>54. What's the output?",
      "id": "user-content-54-whats-the-output",
      "index": "54",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const myYoutube = {\n  name: \"hoccoban\",\n  address: \"youtube.com/hoccoban\",\n  getInfo() {\n    return this;\n  },\n  content: () => (this === window ? myYoutube.getInfo() : this),\n};\n\nconsole.log(myYoutube.content().name);",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">myYoutube</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"hoccoban\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">address</span>: <span class=\"pl-s\">\"youtube.com/hoccoban\"</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">getInfo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-en\">content</span>: <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span> <span class=\"pl-c1\">===</span> <span class=\"pl-smi\">window</span> ? <span class=\"pl-s1\">myYoutube</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getInfo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> : <span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">myYoutube</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">content</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: \"hoccoban\"\nB: window (object)\nC: NaN\nD: undefined",
      "innerHTML": "\n<li>A: \"hoccoban\"</li>\n<li>B: window (object)</li>\n<li>C: NaN</li>\n<li>D: undefined</li>\n",
      "options": [
        ["A", "\"hoccoban\""],
        ["B", "window (object)"],
        ["C", "NaN"],
        ["D", "undefined"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-6\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-6\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: A</h4>\n<p>To answer the tricky question above, you might want to have a look at the concept of <code>this</code> in JavaScript (on browser environment). By default, <code>this</code> refers to <code>window</code> object. Note that <code>Window</code> (written in capital) is the Function constructor of the <code>window</code> object. In this regard, <code>console.log(this === window)</code> return true but <code>console.log(this === Window)</code> returns false.</p>\n<p>As <code>getInfo()</code> is an arrow function, <code>this</code> declared inside this function points to <code>window</code>, so <code>myYoutube.content()</code> returns <code>myYoutube.getInfo()</code>. Noted that we have to explicitly write <code>myYoutube.getInfo()</code> to make sure the code will run correctly as <code>this</code> in this case does not work as it does not refer to the currect object. In the function <code>getInfo()</code>, however, <code>this</code> actually refers to the currect object instead of <code>window</code> object because we use a normal function here.</p>\n<p>Then we have the property <code>name</code> with the value \"hoccoban\". So the correct answer is A.</p>\n<p></p>\n",
      "answer": "A",
      "description": [
        "To answer the tricky question above, you might want to have a look at the concept of <code>this</code> in JavaScript (on browser environment). By default, <code>this</code> refers to <code>window</code> object. Note that <code>Window</code> (written in capital) is the Function constructor of the <code>window</code> object. In this regard, <code>console.log(this === window)</code> return true but <code>console.log(this === Window)</code> returns false.",
        "As <code>getInfo()</code> is an arrow function, <code>this</code> declared inside this function points to <code>window</code>, so <code>myYoutube.content()</code> returns <code>myYoutube.getInfo()</code>. Noted that we have to explicitly write <code>myYoutube.getInfo()</code> to make sure the code will run correctly as <code>this</code> in this case does not work as it does not refer to the currect object. In the function <code>getInfo()</code>, however, <code>this</code> actually refers to the currect object instead of <code>window</code> object because we use a normal function here.",
        "Then we have the property <code>name</code> with the value \"hoccoban\". So the correct answer is A."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "55. What's the output?",
      "innerHTML": "<a id=\"user-content-55-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#55-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>55. What's the output?",
      "id": "user-content-55-whats-the-output",
      "index": "55",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const myArray = [1, 2, 3];\n\nmyArray.someProperty = this;\n\nArray.prototype.someOtherProperty = \"hello\";\n\nlet result = [];\n\nfor (let key in myArray) {\n  result.push(key);\n}\n\nfor (let key in myArray) {\n  if (myArray.hasOwnProperty(key)) {\n    result.push(key);\n  }\n}\n\nconsole.log(result.length);",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">myArray</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">myArray</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">someProperty</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">someOtherProperty</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"hello\"</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">key</span> <span class=\"pl-k\">in</span> <span class=\"pl-s1\">myArray</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">key</span> <span class=\"pl-k\">in</span> <span class=\"pl-s1\">myArray</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">myArray</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">hasOwnProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 10\nB: NaN\nC: 9\nD: 7",
      "innerHTML": "\n<li>A: 10</li>\n<li>B: NaN</li>\n<li>C: 9</li>\n<li>D: 7</li>\n",
      "options": [
        ["A", "10"],
        ["B", "NaN"],
        ["C", "9"],
        ["D", "7"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-13\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-13\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: C</h4>\n<p>We have a simple array that consists of 3 elements. If checking the type of the array with the operator <code>typeof</code>, we will have <code>object</code>. (Hint, you can make use of <code>Array.isArray(array))</code> or <code>array instanceof Array</code> to check its type).</p>\n<p>When declaring <code>myArray.someProperty</code>, we now add a new property to that array and when declaring <code>Array.prototype.someOtherProperty = \"hello\"</code>, we add a new property to every single array.</p>\n<p>As a result, the <code>for... in</code> loop will iterate through the array in question and return its key/property and the inherited property as well. However, in the second iteration, we take advantage of the method <code>hasOwnProperty(key)</code> to check whether a particular key/property actually belongs to the array in question rather than the inherited one.</p>\n<p>In short, in the first iteration, we get 5 (3 original ones, 1 property that is directly added to the array, 1 inherited from the Array.prototype. In the second one, we only get 4 as the inherited property is not taken into consideration.</p>\n<p>Keep in mind that, we use <code>for... of</code> to loop through an array or the traditional <code>for</code> loop. It is not a good practice to use <code>for ... in</code> to loop through an array. It is often used to loop through an object.</p>\n<p></p>\n",
      "answer": "C",
      "description": [
        "We have a simple array that consists of 3 elements. If checking the type of the array with the operator <code>typeof</code>, we will have <code>object</code>. (Hint, you can make use of <code>Array.isArray(array))</code> or <code>array instanceof Array</code> to check its type).",
        "When declaring <code>myArray.someProperty</code>, we now add a new property to that array and when declaring <code>Array.prototype.someOtherProperty = \"hello\"</code>, we add a new property to every single array.",
        "As a result, the <code>for... in</code> loop will iterate through the array in question and return its key/property and the inherited property as well. However, in the second iteration, we take advantage of the method <code>hasOwnProperty(key)</code> to check whether a particular key/property actually belongs to the array in question rather than the inherited one.",
        "In short, in the first iteration, we get 5 (3 original ones, 1 property that is directly added to the array, 1 inherited from the Array.prototype. In the second one, we only get 4 as the inherited property is not taken into consideration.",
        "Keep in mind that, we use <code>for... of</code> to loop through an array or the traditional <code>for</code> loop. It is not a good practice to use <code>for ... in</code> to loop through an array. It is often used to loop through an object."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "56. What's the output?",
      "innerHTML": "<a id=\"user-content-56-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#56-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>56. What's the output?",
      "id": "user-content-56-whats-the-output",
      "index": "56",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const coderfarm = [1, 2, 3, 4, 5];\n\nconst [top, ...bottom] = (function (a) {\n  let result = a;\n\n  a.unshift(new Array(3));\n\n  return result;\n})(coderfarm);\n\nconsole.log(top.length + bottom.length);",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">coderfarm</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">4</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">5</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">top</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">bottom</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">a</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-s1\">a</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unshift</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">Array</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">coderfarm</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">top</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">bottom</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 8\nB: 9\nC: 10\nD: 11",
      "innerHTML": "\n<li>A: 8</li>\n<li>B: 9</li>\n<li>C: 10</li>\n<li>D: 11</li>\n",
      "options": [
        ["A", "8"],
        ["B", "9"],
        ["C", "10"],
        ["D", "11"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-7\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-7\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: A</h4>\n<p>We are using destructure array (or object) technique to extract element of an array (or object). We also take advantage of <code>...</code> (spread parameter) here.</p>\n<p>The array we are destructuring is returned from a self-executing function. First we pass the parameter <code>coderfarm</code>, which is the parameter <code>a</code> when declaring the function. Then we update this array with some additional value (an array with three <code>undefined</code> elements using <code>new Array(3)</code>) on the top of the array (using <code>unshift</code>). The array is updated now as <code>[[undefined, undefined, undefined], 1, 2, 3, 4, 5]</code>.</p>\n<p>So <code>top</code> is the first element of the array or <code>[undefined, undefined, undefined]</code>, which returns 3 when we check the length.</p>\n<p>The <code>bottom</code> returns the rest of the array in question, which is 5 when using <code>length</code> property.</p>\n<p>The final number is 8 and thus the correct answer is A.</p>\n<p></p>\n",
      "answer": "A",
      "description": [
        "We are using destructure array (or object) technique to extract element of an array (or object). We also take advantage of <code>...</code> (spread parameter) here.",
        "The array we are destructuring is returned from a self-executing function. First we pass the parameter <code>coderfarm</code>, which is the parameter <code>a</code> when declaring the function. Then we update this array with some additional value (an array with three <code>undefined</code> elements using <code>new Array(3)</code>) on the top of the array (using <code>unshift</code>). The array is updated now as <code>[[undefined, undefined, undefined], 1, 2, 3, 4, 5]</code>.",
        "So <code>top</code> is the first element of the array or <code>[undefined, undefined, undefined]</code>, which returns 3 when we check the length.",
        "The <code>bottom</code> returns the rest of the array in question, which is 5 when using <code>length</code> property.",
        "The final number is 8 and thus the correct answer is A."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "57. What's the output?",
      "innerHTML": "<a id=\"user-content-57-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#57-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>57. What's the output?",
      "id": "user-content-57-whats-the-output",
      "index": "57",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "let age = { number: 10 };\n\nconst getAge = (flag) => {\n  flag ? delete age.number : delete age;\n  return age.number++;\n};\n\nconsole.log(getAge(false));\n\nconsole.log(age.number);\n\nconsole.log(getAge(true));\n\nconsole.log(age.number);",
      "innerHTML": "<pre><span class=\"pl-k\">let</span> <span class=\"pl-s1\">age</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">number</span>: <span class=\"pl-c1\">10</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">getAge</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">flag</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-s1\">flag</span> ? <span class=\"pl-k\">delete</span> <span class=\"pl-s1\">age</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">number</span> : <span class=\"pl-k\">delete</span> <span class=\"pl-s1\">age</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">age</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">number</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">getAge</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">false</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">age</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">number</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">getAge</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">age</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">number</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 10 - 10 - NaN - NaN\nB: 10 - 10 - undefined - undefined\nC: 10 - 11 - undefined - undefined\nD: 10 - 11 - NaN - NaN",
      "innerHTML": "\n<li>A: 10 - 10 - NaN - NaN</li>\n<li>B: 10 - 10 - undefined - undefined</li>\n<li>C: 10 - 11 - undefined - undefined</li>\n<li>D: 10 - 11 - NaN - NaN</li>\n",
      "options": [
        ["A", "10 - 10 - NaN - NaN"],
        ["B", "10 - 10 - undefined - undefined"],
        ["C", "10 - 11 - undefined - undefined"],
        ["D", "10 - 11 - NaN - NaN"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-23\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-23\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>The operator <code>delete</code> only works on the property of an object, not the object itself. In the code snippet above, we have a simple function <code>getAge</code> with the parameter <code>flag</code>. When the <code>flag</code> is <code>true</code>, we trigger <code>delete age.number</code> and if it is <code>false</code>, we will use the operator <code>delete</code> upon the whole object.</p>\n<p>As this operator does not work on an object, if we can say that, it turns out that <code>delete age</code> actually does nothing. As such, <code>console.log(getAge(false))</code> returns 10 and simultanously increases the value of <code>age.number</code> to 11. The value is now being kept in the memory. As such, <code>console.log(age.number)</code> will return 11.</p>\n<p>When we pass the argument <code>flag</code> as <code>true</code> in the <code>console.log(getAge(true))</code>, we will trigger <code>delete age.number</code> which removes the value and the property <code>age.number</code> itself. It means <code>age.number</code> is now <code>undefined</code>. However, because we also attempt to increase the value of this <code>undefined</code> property using <code>++</code> operator, it returns <code>NaN</code>.</p>\n<p><code>console.log(age.number)</code> also returns <code>NaN</code> as well. So the correct answer is D.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "The operator <code>delete</code> only works on the property of an object, not the object itself. In the code snippet above, we have a simple function <code>getAge</code> with the parameter <code>flag</code>. When the <code>flag</code> is <code>true</code>, we trigger <code>delete age.number</code> and if it is <code>false</code>, we will use the operator <code>delete</code> upon the whole object.",
        "As this operator does not work on an object, if we can say that, it turns out that <code>delete age</code> actually does nothing. As such, <code>console.log(getAge(false))</code> returns 10 and simultanously increases the value of <code>age.number</code> to 11. The value is now being kept in the memory. As such, <code>console.log(age.number)</code> will return 11.",
        "When we pass the argument <code>flag</code> as <code>true</code> in the <code>console.log(getAge(true))</code>, we will trigger <code>delete age.number</code> which removes the value and the property <code>age.number</code> itself. It means <code>age.number</code> is now <code>undefined</code>. However, because we also attempt to increase the value of this <code>undefined</code> property using <code>++</code> operator, it returns <code>NaN</code>.",
        "<code>console.log(age.number)</code> also returns <code>NaN</code> as well. So the correct answer is D."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "58. What's the output?",
      "innerHTML": "<a id=\"user-content-58-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#58-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>58. What's the output?",
      "id": "user-content-58-whats-the-output",
      "index": "58",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const youtube = { name: \"hoccoban\" };\n\nconst copy = Object.create(youtube);\n\nconst cloneA = Object.assign({}, copy);\n\nconst cloneB = Object.assign({}, youtube);\n\nconsole.log(cloneA.name);\n\nconsole.log(cloneB.name);\n\nconsole.log(copy.name);",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">youtube</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">\"hoccoban\"</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">copy</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">youtube</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">cloneA</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">assign</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">copy</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">cloneB</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">assign</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">youtube</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cloneA</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cloneB</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">copy</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: undefined - \"hoccoban\" - \"hoccoban\"\nB: \"hoccoban\" - \"hoccoban\" - \"hoccoban\"\nC: \"hoccoban\" - \"hoccoban\" - \"undefined\"\nD: undefined - \"undefined\" - \"hoccoban\"",
      "innerHTML": "\n<li>A: undefined - \"hoccoban\" - \"hoccoban\"</li>\n<li>B: \"hoccoban\" - \"hoccoban\" - \"hoccoban\"</li>\n<li>C: \"hoccoban\" - \"hoccoban\" - \"undefined\"</li>\n<li>D: undefined - \"undefined\" - \"hoccoban\"</li>\n",
      "options": [
        ["A", "undefined - \"hoccoban\" - \"hoccoban\""],
        ["B", "\"hoccoban\" - \"hoccoban\" - \"hoccoban\""],
        [
          "C",
          "\"hoccoban\" - \"hoccoban\" - \"undefined\""
        ],
        ["D", "undefined - \"undefined\" - \"hoccoban\""]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-8\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-8\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: A</h4>\n<p>We have three outputs in the code snippet above.</p>\n<p>First <code>console.log(cloneA.name);</code> will return <code>undefined</code> but why? We use <code>Object.assign</code> to clone a new object from an empty and from the object <code>copy</code>. The object <code>copy</code> itself is actually created from the original object <code>youtube</code> using <code>Object.create</code>. Noted that because we use <code>Object.create</code>, <code>copy</code> will inherit the data from the original one but it is still an empty object itself.</p>\n<p>Second, both <code>console.log(cloneB.name)</code> and <code>console.log(copy.name)</code> return \"hoccoban\" because <code>cloneB.name</code> will have the actual property <code>name</code>. On the contrary, <code>copy.name</code> outputs the property <code>name</code> inherited from the <code>youtube</code>.</p>\n<p>So the correct answer is A.</p>\n<p></p>\n",
      "answer": "A",
      "description": [
        "We have three outputs in the code snippet above.",
        "First <code>console.log(cloneA.name);</code> will return <code>undefined</code> but why? We use <code>Object.assign</code> to clone a new object from an empty and from the object <code>copy</code>. The object <code>copy</code> itself is actually created from the original object <code>youtube</code> using <code>Object.create</code>. Noted that because we use <code>Object.create</code>, <code>copy</code> will inherit the data from the original one but it is still an empty object itself.",
        "Second, both <code>console.log(cloneB.name)</code> and <code>console.log(copy.name)</code> return \"hoccoban\" because <code>cloneB.name</code> will have the actual property <code>name</code>. On the contrary, <code>copy.name</code> outputs the property <code>name</code> inherited from the <code>youtube</code>.",
        "So the correct answer is A."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "59. What's the output?",
      "innerHTML": "<a id=\"user-content-59-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#59-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>59. What's the output?",
      "id": "user-content-59-whats-the-output",
      "index": "59",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "((x) => {\n  const data = !Array.isArray(x) ? x : x.entries();\n\n  console.log(data.next().value[1]);\n})([\"hello\", \"world\", \"vuong\"]);",
      "innerHTML": "<pre><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">data</span> <span class=\"pl-c1\">=</span> !<span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">)</span> ? <span class=\"pl-s1\">x</span> : <span class=\"pl-s1\">x</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">entries</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-s\">\"hello\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"world\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"vuong\"</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: NaN\nB: \"hello\"\nC: \"world\"\nD: \"vuong\"",
      "innerHTML": "\n<li>A: NaN</li>\n<li>B: \"hello\"</li>\n<li>C: \"world\"</li>\n<li>D: \"vuong\"</li>\n",
      "options": [
        ["A", "NaN"],
        ["B", "\"hello\""],
        ["C", "\"world\""],
        ["D", "\"vuong\""]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-10\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-10\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: B</h4>\n<p>We have a self-invoking function here and we pass an array to it when the function is executed. Note that <code>Array.isArray(x)</code> return <code>true</code> but actually we use <code>!</code> before <code>Array.isArray(x)</code>. It means <code>data</code> will return <code>x.entries()</code>.</p>\n<p>The method <code>array.entries()</code>, as you might have already known, returns a <code>gererator</code>. Here we will call <code>next()</code> to iterate through each element. Note that if you only call <code>next()</code> once, it will only return the first element instead of the whole iterator.</p>\n<p>Then when we call <code>value</code>, it returns an array with the index and the value of the iterator. So what will we get if we call <code> console.log(data.next().value[0])</code>. Sure, it returns <code>0</code> as <code>0</code> is the index.</p>\n<p>So the correct answer is B.</p>\n<p></p>\n",
      "answer": "B",
      "description": [
        "We have a self-invoking function here and we pass an array to it when the function is executed. Note that <code>Array.isArray(x)</code> return <code>true</code> but actually we use <code>!</code> before <code>Array.isArray(x)</code>. It means <code>data</code> will return <code>x.entries()</code>.",
        "The method <code>array.entries()</code>, as you might have already known, returns a <code>gererator</code>. Here we will call <code>next()</code> to iterate through each element. Note that if you only call <code>next()</code> once, it will only return the first element instead of the whole iterator.",
        "Then when we call <code>value</code>, it returns an array with the index and the value of the iterator. So what will we get if we call <code> console.log(data.next().value[0])</code>. Sure, it returns <code>0</code> as <code>0</code> is the index.",
        "So the correct answer is B."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "60. What's the output?",
      "innerHTML": "<a id=\"user-content-60-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#60-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>60. What's the output?",
      "id": "user-content-60-whats-the-output",
      "index": "60",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "let x = Symbol();\n\nlet y = Symbol();\n\nconsole.log(x === y ? `${typeof x}`[1] : `${typeof x}`[2]);",
      "innerHTML": "<pre><span class=\"pl-k\">let</span> <span class=\"pl-s1\">x</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Symbol</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">y</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Symbol</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s1\">y</span> ? <span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">x</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span> : <span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">x</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: NaN\nB: \"object\"\nC: \"y\"\nD: \"m\"",
      "innerHTML": "\n<li>A: NaN</li>\n<li>B: \"object\"</li>\n<li>C: \"y\"</li>\n<li>D: \"m\"</li>\n",
      "options": [
        ["A", "NaN"],
        ["B", "\"object\""],
        ["C", "\"y\""],
        ["D", "\"m\""]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-24\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-24\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>As <code>x</code> and <code>y</code> are both instances of <code>symbol</code>, they are unique in our codebase; therefore, the <code>===</code> comparison will return <code>false</code> as expected. In the simple code snippet above, we get the <code>else</code> operation.</p>\n<p>It should be noted that the <code>typeof x</code> operation gives us <code>symbol</code>, and since a string in JavaScript is iterable, we get <code>m</code> as we pass in the index 2.</p>\n<p>So the correct answer is D.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "As <code>x</code> and <code>y</code> are both instances of <code>symbol</code>, they are unique in our codebase; therefore, the <code>===</code> comparison will return <code>false</code> as expected. In the simple code snippet above, we get the <code>else</code> operation.",
        "It should be noted that the <code>typeof x</code> operation gives us <code>symbol</code>, and since a string in JavaScript is iterable, we get <code>m</code> as we pass in the index 2.",
        "So the correct answer is D."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "61. What's the output?",
      "innerHTML": "<a id=\"user-content-61-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#61-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>61. What's the output?",
      "id": "user-content-61-whats-the-output",
      "index": "61",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const frameworks = [\"react\", \"angular\", \"vue\"];\n\nconst iterator = frameworks[Symbol.iterator]();\nconst i = frameworks.entries();\n\niterator.next();\ni.next();\n\nconsole.log(iterator.next().value[1]);\nconsole.log(i.next().value[1]);",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">frameworks</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-s\">\"react\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"angular\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"vue\"</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">iterator</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">frameworks</span><span class=\"pl-kos\">[</span><span class=\"pl-v\">Symbol</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">iterator</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">frameworks</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">entries</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">iterator</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">i</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">iterator</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: \"react\" - \"angular\"\nB: \"react\" - \"react\"\nC: \"angular\" - \"angular\"\nD: \"n\" - \"angular\"",
      "innerHTML": "\n<li>A: \"react\" - \"angular\"</li>\n<li>B: \"react\" - \"react\"</li>\n<li>C: \"angular\" - \"angular\"</li>\n<li>D: \"n\" - \"angular\"</li>\n",
      "options": [
        ["A", "\"react\" - \"angular\""],
        ["B", "\"react\" - \"react\""],
        ["C", "\"angular\" - \"angular\""],
        ["D", "\"n\" - \"angular\""]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-25\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-25\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: D</h4>\n<p>As <code>frameworks</code> is an array, it has a built-in method named <code>Symbol.iterator</code>. You can hence iterate through the whole array using commonly used methods such as <code>for... of</code>, normal <code>for loop</code>, <code>forEach</code> or <code>map</code>, among others. That is relatively trivial, I suppose.</p>\n<p>This code challenge above is written to help us understand the concept of iteration better. First, we use the built-in method called <code>entries()</code> to create a new iteration. So does <a href=\"/yeungon/In-JavaScript-we-trust/blob/master\">Symbol.iterator</a>. Both seem to do the same thing.</p>\n<p>Each time we call <code>next()</code> method, the iteration will output one element. We then can call <code>value()</code> to get the value. The difference between <code>iterator</code> and <code>i</code> is that the former shows the value itself while the latter outputs an array consisting of the index and the value. It means that in the code above, <code>iterator.next().value</code> returns <code>angular</code> and <code>i.next().value</code> gives us <code>[1, angular]</code>.</p>\n<p>So the correct answer is D.</p>\n<p></p>\n",
      "answer": "D",
      "description": [
        "As <code>frameworks</code> is an array, it has a built-in method named <code>Symbol.iterator</code>. You can hence iterate through the whole array using commonly used methods such as <code>for... of</code>, normal <code>for loop</code>, <code>forEach</code> or <code>map</code>, among others. That is relatively trivial, I suppose.",
        "This code challenge above is written to help us understand the concept of iteration better. First, we use the built-in method called <code>entries()</code> to create a new iteration. So does <a href=\"/yeungon/In-JavaScript-we-trust/blob/master\">Symbol.iterator</a>. Both seem to do the same thing.",
        "Each time we call <code>next()</code> method, the iteration will output one element. We then can call <code>value()</code> to get the value. The difference between <code>iterator</code> and <code>i</code> is that the former shows the value itself while the latter outputs an array consisting of the index and the value. It means that in the code above, <code>iterator.next().value</code> returns <code>angular</code> and <code>i.next().value</code> gives us <code>[1, angular]</code>.",
        "So the correct answer is D."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "62. What's the output?",
      "innerHTML": "<a id=\"user-content-62-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#62-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>62. What's the output?",
      "id": "user-content-62-whats-the-output",
      "index": "62",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "class React {\n  theName = \"Not React\";\n}\n\nclass Author extends React {\n  static theName = \"Real React\";\n\n  render() {\n    return this.theName;\n  }\n\n  static render() {\n    return this.theName;\n  }\n}\n\nconst me = new Author();\n\nconsole.log(me.render());\n\nconsole.log(Author.render());",
      "innerHTML": "<pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">React</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">theName</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"Not React\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">class</span> <span class=\"pl-v\">Author</span> <span class=\"pl-k\">extends</span> <span class=\"pl-v\">React</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">static</span> <span class=\"pl-c1\">theName</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"Real React\"</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-en\">render</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">theName</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">static</span> <span class=\"pl-en\">render</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">theName</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">me</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Author</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">me</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">render</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Author</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">render</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: \"Not React\" - \"Real React\"\nB: \"Not React\" - Error\nC: Error - Error\nD: Error - \"Real React\"",
      "innerHTML": "\n<li>A: \"Not React\" - \"Real React\"</li>\n<li>B: \"Not React\" - Error</li>\n<li>C: Error - Error</li>\n<li>D: Error - \"Real React\"</li>\n",
      "options": [
        ["A", "\"Not React\" - \"Real React\""],
        ["B", "\"Not React\" - Error"],
        ["C", "Error - Error"],
        ["D", "Error - \"Real React\""]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-9\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-9\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: A</h4>\n<p>We have two classes in the code snippet above. It sounds we are imitating React. The <code>React</code> class has only one property named <code>theName,</code> and no method is declared here. Providing that <code>Author</code> extends the <code>React</code> class, it inherits that property, surely. However, we have also declared another property with the same name in the <code>Author</code> classs. The difference is that the property declared in the child class is given the keyword <code>static.</code></p>\n<p>The <code>Author</code> class also has two methods with the same name <code>render()</code>, one as regular methods and another with <code>static</code> keyword. Will that work in JavaScript?</p>\n<p>It turns out that JavaScript is quite flexible. It supports both property and method if they are declared with the same name as long as they are either regular property (or method) or static property (or method).</p>\n<p>The last thing you should be aware of is that the method <code>static render()</code> only calls the static property, here is <code>static theName = \"Real React\";</code> So does the regular method <code>render().</code> As such, the code does not run into any issues.</p>\n<p>So the correct answer is A.</p>\n<p></p>\n",
      "answer": "A",
      "description": [
        "We have two classes in the code snippet above. It sounds we are imitating React. The <code>React</code> class has only one property named <code>theName,</code> and no method is declared here. Providing that <code>Author</code> extends the <code>React</code> class, it inherits that property, surely. However, we have also declared another property with the same name in the <code>Author</code> classs. The difference is that the property declared in the child class is given the keyword <code>static.</code>",
        "The <code>Author</code> class also has two methods with the same name <code>render()</code>, one as regular methods and another with <code>static</code> keyword. Will that work in JavaScript?",
        "It turns out that JavaScript is quite flexible. It supports both property and method if they are declared with the same name as long as they are either regular property (or method) or static property (or method).",
        "The last thing you should be aware of is that the method <code>static render()</code> only calls the static property, here is <code>static theName = \"Real React\";</code> So does the regular method <code>render().</code> As such, the code does not run into any issues.",
        "So the correct answer is A."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "63. What's the output?",
      "innerHTML": "<a id=\"user-content-63-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#63-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>63. What's the output?",
      "id": "user-content-63-whats-the-output",
      "index": "63",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "class js {\n  say = \"hello\";\n}\n\njs.prototype.say = \"goodbye\";\nconsole.log(new js().say);\n\njs.prototype.thename = \"google\";\nconsole.log(new js().thename);",
      "innerHTML": "<pre><span class=\"pl-k\">class</span> <span class=\"pl-s1\">js</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">say</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"hello\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-s1\">js</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">say</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"goodbye\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-s1\">js</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">say</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">js</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">thename</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">\"google\"</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-s1\">js</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">thename</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: Error - Error\nB: \"hello\" - \"google\"\nC: \"goodbye\" - \"google\"\nD: Error - \"google\"",
      "innerHTML": "\n<li>A: Error - Error</li>\n<li>B: \"hello\" - \"google\"</li>\n<li>C: \"goodbye\" - \"google\"</li>\n<li>D: Error - \"google\"</li>\n",
      "options": [
        ["A", "Error - Error"],
        ["B", "\"hello\" - \"google\""],
        ["C", "\"goodbye\" - \"google\""],
        ["D", "Error - \"google\""]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-11\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-11\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: B</h4>\n<p><code>js</code> is a standard class declared in the code snippet above that has only one property with the name <code>say.</code> Then we again declare another property with the same name <code>say</code> for it. You might think that the property <code>say</code> has been overwritten with a new value <code>goodbye.</code></p>\n<p>That is not the case as we will get <code>hello</code> when we run <code>console.log(new js().say);</code>. It is clear that the JavaScript engine prioritizes the property declared inside the class more than the property declared later using the prototype mechanism.</p>\n<p>If the property has not been declared inside the class itself, we can then add a new one with the help of <code>prototype</code> as in <code>thename</code>. Without the doubt, the code <code>console.log(new js().thename);</code> gives us <code>google</code> as expected.</p>\n<p>So the correct answer is B.</p>\n<p></p>\n",
      "answer": "B",
      "description": [
        "<code>js</code> is a standard class declared in the code snippet above that has only one property with the name <code>say.</code> Then we again declare another property with the same name <code>say</code> for it. You might think that the property <code>say</code> has been overwritten with a new value <code>goodbye.</code>",
        "That is not the case as we will get <code>hello</code> when we run <code>console.log(new js().say);</code>. It is clear that the JavaScript engine prioritizes the property declared inside the class more than the property declared later using the prototype mechanism.",
        "If the property has not been declared inside the class itself, we can then add a new one with the help of <code>prototype</code> as in <code>thename</code>. Without the doubt, the code <code>console.log(new js().thename);</code> gives us <code>google</code> as expected.",
        "So the correct answer is B."
      ]
    }
  ],
  [
    {
      "tagName": "H6",
      "innerText": "64. What's the output?",
      "innerHTML": "<a id=\"user-content-64-whats-the-output\" class=\"anchor\" aria-hidden=\"true\" href=\"#64-whats-the-output\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>64. What's the output?",
      "id": "user-content-64-whats-the-output",
      "index": "64",
      "title": " What's the output?"
    },
    {
      "tagName": "DIV",
      "innerText": "const App = ([y, x, z]) => {\t\t\t\n\treturn ()=>{\n\t\t\t++x\n\t\treturn ()=>{\n\t\t\treturn x++;\n\t\t}\n\t}\t\n}\n\nconsole.log(App([10, 20, 30, 40])()())",
      "innerHTML": "<pre><span class=\"pl-k\">const</span> <span class=\"pl-v\">App</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">y</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">x</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">z</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\t\t\t\n\t<span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-c1\">=&gt;</span><span class=\"pl-kos\">{</span>\n\t\t\t<span class=\"pl-c1\">++</span><span class=\"pl-s1\">x</span>\n\t\t<span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-c1\">=&gt;</span><span class=\"pl-kos\">{</span>\n\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">x</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">;</span>\n\t\t<span class=\"pl-kos\">}</span>\n\t<span class=\"pl-kos\">}</span>\t\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">App</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-c1\">10</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">20</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">30</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">40</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span></pre>"
    },
    {
      "tagName": "UL",
      "innerText": "A: 10\nB: 32\nC: 21\nD: 22",
      "innerHTML": "\n<li>A: 10</li>\n<li>B: 32</li>\n<li>C: 21</li>\n<li>D: 22</li>\n",
      "options": [
        ["A", "10"],
        ["B", "32"],
        ["C", "21"],
        ["D", "22"]
      ]
    },
    {
      "tagName": "DETAILS",
      "innerText": "Answer",
      "innerHTML": "<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-14\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-14\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Answer: C</h4>\n<p>To answer the question raised on the above code snippet, you might want to revisit two concepts, <code>currying function</code> and <code>destructing array or object.</code></p>\n<p>First, <code>currying function</code> means we convert a function with multiple parameters into multiple functions with a SINGLE parameter. Then you can easily manipulate the flow of the data. Noted that <code>currying function</code> is relevant to <code>higher-order function</code>, you might want to have a look.</p>\n<p><code>destructing array or object</code> means we attempt to extract a complex array or object more conveniently. For example, <code>[y, x, z] = [10, 20, 30, 40]</code> will extract y, x and z with the value 10, 20 and 30 respectively.</p>\n<p>The last thing is incremental operator here <code>++x</code> returns 21 but <code>x++</code> does not as it still returns 21.</p>\n<p>So the correct answer is C.</p>\n<p></p>\n",
      "answer": "C",
      "description": [
        "To answer the question raised on the above code snippet, you might want to revisit two concepts, <code>currying function</code> and <code>destructing array or object.</code>",
        "First, <code>currying function</code> means we convert a function with multiple parameters into multiple functions with a SINGLE parameter. Then you can easily manipulate the flow of the data. Noted that <code>currying function</code> is relevant to <code>higher-order function</code>, you might want to have a look.",
        "<code>destructing array or object</code> means we attempt to extract a complex array or object more conveniently. For example, <code>[y, x, z] = [10, 20, 30, 40]</code> will extract y, x and z with the value 10, 20 and 30 respectively.",
        "The last thing is incremental operator here <code>++x</code> returns 21 but <code>x++</code> does not as it still returns 21.",
        "So the correct answer is C."
      ]
    }
  ]
]
